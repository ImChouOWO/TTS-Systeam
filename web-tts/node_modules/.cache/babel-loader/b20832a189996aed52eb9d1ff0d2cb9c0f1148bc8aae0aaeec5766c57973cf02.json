{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Owner\\\\Desktop\\\\python\\\\TTS-systeam\\\\TTS-Systeam\\\\web-tts\\\\src\\\\compoment\\\\page\\\\audioPlayer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AudioPlayer(props) {\n  _s();\n  const {\n    path,\n    shouldPlay,\n    onPlayed\n  } = props;\n  const audioRef = useRef(null);\n  useEffect(() => {\n    if (path) {\n      const newAudioSource = `/voice/${path}`;\n      audioRef.current.src = newAudioSource; // 直接更新 audio 元素的 src\n      console.log(path);\n    }\n  }, [path]);\n  useEffect(() => {\n    if (shouldPlay && audioRef.current) {\n      audioRef.current.play().then(() => {\n        console.log(\"Audio is now playing\");\n        onPlayed(); // 通知 MainPage 音频已播放\n      }).catch(error => {\n        console.error(\"Audio playback failed:\", error);\n      });\n    }\n  }, [shouldPlay]);\n  return /*#__PURE__*/_jsxDEV(\"audio\", {\n    ref: audioRef,\n    preload: \"auto\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 7\n  }, this);\n}\n_s(AudioPlayer, \"RQv8jBEgK8j2i7IJngr2GUOKwCg=\");\n_c = AudioPlayer;\nexport default AudioPlayer;\nvar _c;\n$RefreshReg$(_c, \"AudioPlayer\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","AudioPlayer","props","_s","path","shouldPlay","onPlayed","audioRef","newAudioSource","current","src","console","log","play","then","catch","error","ref","preload","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Owner/Desktop/python/TTS-systeam/TTS-Systeam/web-tts/src/compoment/page/audioPlayer.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nfunction AudioPlayer(props) {\n    const { path, shouldPlay, onPlayed } = props;\n    const audioRef = useRef(null);\n  \n    useEffect(() => {\n      if (path) {\n        const newAudioSource = `/voice/${path}`;\n        audioRef.current.src = newAudioSource; // 直接更新 audio 元素的 src\n        console.log(path);\n      }\n    }, [path]);\n  \n    useEffect(() => {\n      if (shouldPlay && audioRef.current) {\n        audioRef.current.play()\n          .then(() => {\n            console.log(\"Audio is now playing\");\n            onPlayed(); // 通知 MainPage 音频已播放\n          })\n          .catch(error => {\n            console.error(\"Audio playback failed:\", error);\n          });\n      }\n    }, [shouldPlay]);\n  \n    return (\n      <audio ref={audioRef} preload=\"auto\" />\n    );\n  }\n  \n\nexport default AudioPlayer;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,SAASC,WAAWA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACxB,MAAM;IAAEC,IAAI;IAAEC,UAAU;IAAEC;EAAS,CAAC,GAAGJ,KAAK;EAC5C,MAAMK,QAAQ,GAAGV,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACd,IAAIQ,IAAI,EAAE;MACR,MAAMI,cAAc,GAAI,UAASJ,IAAK,EAAC;MACvCG,QAAQ,CAACE,OAAO,CAACC,GAAG,GAAGF,cAAc,CAAC,CAAC;MACvCG,OAAO,CAACC,GAAG,CAACR,IAAI,CAAC;IACnB;EACF,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EAEVR,SAAS,CAAC,MAAM;IACd,IAAIS,UAAU,IAAIE,QAAQ,CAACE,OAAO,EAAE;MAClCF,QAAQ,CAACE,OAAO,CAACI,IAAI,CAAC,CAAC,CACpBC,IAAI,CAAC,MAAM;QACVH,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;QACnCN,QAAQ,CAAC,CAAC,CAAC,CAAC;MACd,CAAC,CAAC,CACDS,KAAK,CAACC,KAAK,IAAI;QACdL,OAAO,CAACK,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD,CAAC,CAAC;IACN;EACF,CAAC,EAAE,CAACX,UAAU,CAAC,CAAC;EAEhB,oBACEL,OAAA;IAAOiB,GAAG,EAAEV,QAAS;IAACW,OAAO,EAAC;EAAM;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAE3C;AAACnB,EAAA,CA5BMF,WAAW;AAAAsB,EAAA,GAAXtB,WAAW;AA+BpB,eAAeA,WAAW;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}