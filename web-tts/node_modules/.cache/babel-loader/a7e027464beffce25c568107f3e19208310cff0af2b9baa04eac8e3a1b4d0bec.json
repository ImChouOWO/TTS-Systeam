{"ast":null,"code":"/*!\n * @pixi/math - v6.5.10\n * Compiled Thu, 06 Jul 2023 15:25:11 UTC\n *\n * @pixi/math is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n/**\n * Two Pi.\n * @static\n * @member {number}\n * @memberof PIXI\n */\nvar PI_2 = Math.PI * 2;\n/**\n * Conversion factor for converting radians to degrees.\n * @static\n * @member {number} RAD_TO_DEG\n * @memberof PIXI\n */\nvar RAD_TO_DEG = 180 / Math.PI;\n/**\n * Conversion factor for converting degrees to radians.\n * @static\n * @member {number}\n * @memberof PIXI\n */\nvar DEG_TO_RAD = Math.PI / 180;\n/**\n * Constants that identify shapes, mainly to prevent `instanceof` calls.\n * @static\n * @memberof PIXI\n * @enum {number}\n * @property {number} POLY Polygon\n * @property {number} RECT Rectangle\n * @property {number} CIRC Circle\n * @property {number} ELIP Ellipse\n * @property {number} RREC Rounded Rectangle\n */\nvar SHAPES;\n(function (SHAPES) {\n  SHAPES[SHAPES[\"POLY\"] = 0] = \"POLY\";\n  SHAPES[SHAPES[\"RECT\"] = 1] = \"RECT\";\n  SHAPES[SHAPES[\"CIRC\"] = 2] = \"CIRC\";\n  SHAPES[SHAPES[\"ELIP\"] = 3] = \"ELIP\";\n  SHAPES[SHAPES[\"RREC\"] = 4] = \"RREC\";\n})(SHAPES || (SHAPES = {}));\n\n/**\n * The Point object represents a location in a two-dimensional coordinate system, where `x` represents\n * the position on the horizontal axis and `y` represents the position on the vertical axis\n * @class\n * @memberof PIXI\n * @implements {IPoint}\n */\nvar Point = /** @class */function () {\n  /**\n   * Creates a new `Point`\n   * @param {number} [x=0] - position of the point on the x axis\n   * @param {number} [y=0] - position of the point on the y axis\n   */\n  function Point(x, y) {\n    if (x === void 0) {\n      x = 0;\n    }\n    if (y === void 0) {\n      y = 0;\n    }\n    /** Position of the point on the x axis */\n    this.x = 0;\n    /** Position of the point on the y axis */\n    this.y = 0;\n    this.x = x;\n    this.y = y;\n  }\n  /**\n   * Creates a clone of this point\n   * @returns A clone of this point\n   */\n  Point.prototype.clone = function () {\n    return new Point(this.x, this.y);\n  };\n  /**\n   * Copies `x` and `y` from the given point into this point\n   * @param p - The point to copy from\n   * @returns The point instance itself\n   */\n  Point.prototype.copyFrom = function (p) {\n    this.set(p.x, p.y);\n    return this;\n  };\n  /**\n   * Copies this point's x and y into the given point (`p`).\n   * @param p - The point to copy to. Can be any of type that is or extends `IPointData`\n   * @returns The point (`p`) with values updated\n   */\n  Point.prototype.copyTo = function (p) {\n    p.set(this.x, this.y);\n    return p;\n  };\n  /**\n   * Accepts another point (`p`) and returns `true` if the given point is equal to this point\n   * @param p - The point to check\n   * @returns Returns `true` if both `x` and `y` are equal\n   */\n  Point.prototype.equals = function (p) {\n    return p.x === this.x && p.y === this.y;\n  };\n  /**\n   * Sets the point to a new `x` and `y` position.\n   * If `y` is omitted, both `x` and `y` will be set to `x`.\n   * @param {number} [x=0] - position of the point on the `x` axis\n   * @param {number} [y=x] - position of the point on the `y` axis\n   * @returns The point instance itself\n   */\n  Point.prototype.set = function (x, y) {\n    if (x === void 0) {\n      x = 0;\n    }\n    if (y === void 0) {\n      y = x;\n    }\n    this.x = x;\n    this.y = y;\n    return this;\n  };\n  Point.prototype.toString = function () {\n    return \"[@pixi/math:Point x=\" + this.x + \" y=\" + this.y + \"]\";\n  };\n  return Point;\n}();\nvar tempPoints = [new Point(), new Point(), new Point(), new Point()];\n/**\n * Size object, contains width and height\n * @memberof PIXI\n * @typedef {object} ISize\n * @property {number} width - Width component\n * @property {number} height - Height component\n */\n/**\n * Rectangle object is an area defined by its position, as indicated by its top-left corner\n * point (x, y) and by its width and its height.\n * @memberof PIXI\n */\nvar Rectangle = /** @class */function () {\n  /**\n   * @param x - The X coordinate of the upper-left corner of the rectangle\n   * @param y - The Y coordinate of the upper-left corner of the rectangle\n   * @param width - The overall width of the rectangle\n   * @param height - The overall height of the rectangle\n   */\n  function Rectangle(x, y, width, height) {\n    if (x === void 0) {\n      x = 0;\n    }\n    if (y === void 0) {\n      y = 0;\n    }\n    if (width === void 0) {\n      width = 0;\n    }\n    if (height === void 0) {\n      height = 0;\n    }\n    this.x = Number(x);\n    this.y = Number(y);\n    this.width = Number(width);\n    this.height = Number(height);\n    this.type = SHAPES.RECT;\n  }\n  Object.defineProperty(Rectangle.prototype, \"left\", {\n    /** Returns the left edge of the rectangle. */\n    get: function () {\n      return this.x;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Rectangle.prototype, \"right\", {\n    /** Returns the right edge of the rectangle. */\n    get: function () {\n      return this.x + this.width;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Rectangle.prototype, \"top\", {\n    /** Returns the top edge of the rectangle. */\n    get: function () {\n      return this.y;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Rectangle.prototype, \"bottom\", {\n    /** Returns the bottom edge of the rectangle. */\n    get: function () {\n      return this.y + this.height;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Rectangle, \"EMPTY\", {\n    /** A constant empty rectangle. */\n    get: function () {\n      return new Rectangle(0, 0, 0, 0);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Creates a clone of this Rectangle\n   * @returns a copy of the rectangle\n   */\n  Rectangle.prototype.clone = function () {\n    return new Rectangle(this.x, this.y, this.width, this.height);\n  };\n  /**\n   * Copies another rectangle to this one.\n   * @param rectangle - The rectangle to copy from.\n   * @returns Returns itself.\n   */\n  Rectangle.prototype.copyFrom = function (rectangle) {\n    this.x = rectangle.x;\n    this.y = rectangle.y;\n    this.width = rectangle.width;\n    this.height = rectangle.height;\n    return this;\n  };\n  /**\n   * Copies this rectangle to another one.\n   * @param rectangle - The rectangle to copy to.\n   * @returns Returns given parameter.\n   */\n  Rectangle.prototype.copyTo = function (rectangle) {\n    rectangle.x = this.x;\n    rectangle.y = this.y;\n    rectangle.width = this.width;\n    rectangle.height = this.height;\n    return rectangle;\n  };\n  /**\n   * Checks whether the x and y coordinates given are contained within this Rectangle\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @returns Whether the x/y coordinates are within this Rectangle\n   */\n  Rectangle.prototype.contains = function (x, y) {\n    if (this.width <= 0 || this.height <= 0) {\n      return false;\n    }\n    if (x >= this.x && x < this.x + this.width) {\n      if (y >= this.y && y < this.y + this.height) {\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\n   * Determines whether the `other` Rectangle transformed by `transform` intersects with `this` Rectangle object.\n   * Returns true only if the area of the intersection is >0, this means that Rectangles\n   * sharing a side are not overlapping. Another side effect is that an arealess rectangle\n   * (width or height equal to zero) can't intersect any other rectangle.\n   * @param {Rectangle} other - The Rectangle to intersect with `this`.\n   * @param {Matrix} transform - The transformation matrix of `other`.\n   * @returns {boolean} A value of `true` if the transformed `other` Rectangle intersects with `this`; otherwise `false`.\n   */\n  Rectangle.prototype.intersects = function (other, transform) {\n    if (!transform) {\n      var x0_1 = this.x < other.x ? other.x : this.x;\n      var x1_1 = this.right > other.right ? other.right : this.right;\n      if (x1_1 <= x0_1) {\n        return false;\n      }\n      var y0_1 = this.y < other.y ? other.y : this.y;\n      var y1_1 = this.bottom > other.bottom ? other.bottom : this.bottom;\n      return y1_1 > y0_1;\n    }\n    var x0 = this.left;\n    var x1 = this.right;\n    var y0 = this.top;\n    var y1 = this.bottom;\n    if (x1 <= x0 || y1 <= y0) {\n      return false;\n    }\n    var lt = tempPoints[0].set(other.left, other.top);\n    var lb = tempPoints[1].set(other.left, other.bottom);\n    var rt = tempPoints[2].set(other.right, other.top);\n    var rb = tempPoints[3].set(other.right, other.bottom);\n    if (rt.x <= lt.x || lb.y <= lt.y) {\n      return false;\n    }\n    var s = Math.sign(transform.a * transform.d - transform.b * transform.c);\n    if (s === 0) {\n      return false;\n    }\n    transform.apply(lt, lt);\n    transform.apply(lb, lb);\n    transform.apply(rt, rt);\n    transform.apply(rb, rb);\n    if (Math.max(lt.x, lb.x, rt.x, rb.x) <= x0 || Math.min(lt.x, lb.x, rt.x, rb.x) >= x1 || Math.max(lt.y, lb.y, rt.y, rb.y) <= y0 || Math.min(lt.y, lb.y, rt.y, rb.y) >= y1) {\n      return false;\n    }\n    var nx = s * (lb.y - lt.y);\n    var ny = s * (lt.x - lb.x);\n    var n00 = nx * x0 + ny * y0;\n    var n10 = nx * x1 + ny * y0;\n    var n01 = nx * x0 + ny * y1;\n    var n11 = nx * x1 + ny * y1;\n    if (Math.max(n00, n10, n01, n11) <= nx * lt.x + ny * lt.y || Math.min(n00, n10, n01, n11) >= nx * rb.x + ny * rb.y) {\n      return false;\n    }\n    var mx = s * (lt.y - rt.y);\n    var my = s * (rt.x - lt.x);\n    var m00 = mx * x0 + my * y0;\n    var m10 = mx * x1 + my * y0;\n    var m01 = mx * x0 + my * y1;\n    var m11 = mx * x1 + my * y1;\n    if (Math.max(m00, m10, m01, m11) <= mx * lt.x + my * lt.y || Math.min(m00, m10, m01, m11) >= mx * rb.x + my * rb.y) {\n      return false;\n    }\n    return true;\n  };\n  /**\n   * Pads the rectangle making it grow in all directions.\n   * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n   * @param paddingX - The horizontal padding amount.\n   * @param paddingY - The vertical padding amount.\n   * @returns Returns itself.\n   */\n  Rectangle.prototype.pad = function (paddingX, paddingY) {\n    if (paddingX === void 0) {\n      paddingX = 0;\n    }\n    if (paddingY === void 0) {\n      paddingY = paddingX;\n    }\n    this.x -= paddingX;\n    this.y -= paddingY;\n    this.width += paddingX * 2;\n    this.height += paddingY * 2;\n    return this;\n  };\n  /**\n   * Fits this rectangle around the passed one.\n   * @param rectangle - The rectangle to fit.\n   * @returns Returns itself.\n   */\n  Rectangle.prototype.fit = function (rectangle) {\n    var x1 = Math.max(this.x, rectangle.x);\n    var x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);\n    var y1 = Math.max(this.y, rectangle.y);\n    var y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);\n    this.x = x1;\n    this.width = Math.max(x2 - x1, 0);\n    this.y = y1;\n    this.height = Math.max(y2 - y1, 0);\n    return this;\n  };\n  /**\n   * Enlarges rectangle that way its corners lie on grid\n   * @param resolution - resolution\n   * @param eps - precision\n   * @returns Returns itself.\n   */\n  Rectangle.prototype.ceil = function (resolution, eps) {\n    if (resolution === void 0) {\n      resolution = 1;\n    }\n    if (eps === void 0) {\n      eps = 0.001;\n    }\n    var x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;\n    var y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;\n    this.x = Math.floor((this.x + eps) * resolution) / resolution;\n    this.y = Math.floor((this.y + eps) * resolution) / resolution;\n    this.width = x2 - this.x;\n    this.height = y2 - this.y;\n    return this;\n  };\n  /**\n   * Enlarges this rectangle to include the passed rectangle.\n   * @param rectangle - The rectangle to include.\n   * @returns Returns itself.\n   */\n  Rectangle.prototype.enlarge = function (rectangle) {\n    var x1 = Math.min(this.x, rectangle.x);\n    var x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);\n    var y1 = Math.min(this.y, rectangle.y);\n    var y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);\n    this.x = x1;\n    this.width = x2 - x1;\n    this.y = y1;\n    this.height = y2 - y1;\n    return this;\n  };\n  Rectangle.prototype.toString = function () {\n    return \"[@pixi/math:Rectangle x=\" + this.x + \" y=\" + this.y + \" width=\" + this.width + \" height=\" + this.height + \"]\";\n  };\n  return Rectangle;\n}();\n\n/**\n * The Circle object is used to help draw graphics and can also be used to specify a hit area for displayObjects.\n * @memberof PIXI\n */\nvar Circle = /** @class */function () {\n  /**\n   * @param x - The X coordinate of the center of this circle\n   * @param y - The Y coordinate of the center of this circle\n   * @param radius - The radius of the circle\n   */\n  function Circle(x, y, radius) {\n    if (x === void 0) {\n      x = 0;\n    }\n    if (y === void 0) {\n      y = 0;\n    }\n    if (radius === void 0) {\n      radius = 0;\n    }\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n    this.type = SHAPES.CIRC;\n  }\n  /**\n   * Creates a clone of this Circle instance\n   * @returns A copy of the Circle\n   */\n  Circle.prototype.clone = function () {\n    return new Circle(this.x, this.y, this.radius);\n  };\n  /**\n   * Checks whether the x and y coordinates given are contained within this circle\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @returns Whether the x/y coordinates are within this Circle\n   */\n  Circle.prototype.contains = function (x, y) {\n    if (this.radius <= 0) {\n      return false;\n    }\n    var r2 = this.radius * this.radius;\n    var dx = this.x - x;\n    var dy = this.y - y;\n    dx *= dx;\n    dy *= dy;\n    return dx + dy <= r2;\n  };\n  /**\n   * Returns the framing rectangle of the circle as a Rectangle object\n   * @returns The framing rectangle\n   */\n  Circle.prototype.getBounds = function () {\n    return new Rectangle(this.x - this.radius, this.y - this.radius, this.radius * 2, this.radius * 2);\n  };\n  Circle.prototype.toString = function () {\n    return \"[@pixi/math:Circle x=\" + this.x + \" y=\" + this.y + \" radius=\" + this.radius + \"]\";\n  };\n  return Circle;\n}();\n\n/**\n * The Ellipse object is used to help draw graphics and can also be used to specify a hit area for displayObjects.\n * @memberof PIXI\n */\nvar Ellipse = /** @class */function () {\n  /**\n   * @param x - The X coordinate of the center of this ellipse\n   * @param y - The Y coordinate of the center of this ellipse\n   * @param halfWidth - The half width of this ellipse\n   * @param halfHeight - The half height of this ellipse\n   */\n  function Ellipse(x, y, halfWidth, halfHeight) {\n    if (x === void 0) {\n      x = 0;\n    }\n    if (y === void 0) {\n      y = 0;\n    }\n    if (halfWidth === void 0) {\n      halfWidth = 0;\n    }\n    if (halfHeight === void 0) {\n      halfHeight = 0;\n    }\n    this.x = x;\n    this.y = y;\n    this.width = halfWidth;\n    this.height = halfHeight;\n    this.type = SHAPES.ELIP;\n  }\n  /**\n   * Creates a clone of this Ellipse instance\n   * @returns {PIXI.Ellipse} A copy of the ellipse\n   */\n  Ellipse.prototype.clone = function () {\n    return new Ellipse(this.x, this.y, this.width, this.height);\n  };\n  /**\n   * Checks whether the x and y coordinates given are contained within this ellipse\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @returns Whether the x/y coords are within this ellipse\n   */\n  Ellipse.prototype.contains = function (x, y) {\n    if (this.width <= 0 || this.height <= 0) {\n      return false;\n    }\n    // normalize the coords to an ellipse with center 0,0\n    var normx = (x - this.x) / this.width;\n    var normy = (y - this.y) / this.height;\n    normx *= normx;\n    normy *= normy;\n    return normx + normy <= 1;\n  };\n  /**\n   * Returns the framing rectangle of the ellipse as a Rectangle object\n   * @returns The framing rectangle\n   */\n  Ellipse.prototype.getBounds = function () {\n    return new Rectangle(this.x - this.width, this.y - this.height, this.width, this.height);\n  };\n  Ellipse.prototype.toString = function () {\n    return \"[@pixi/math:Ellipse x=\" + this.x + \" y=\" + this.y + \" width=\" + this.width + \" height=\" + this.height + \"]\";\n  };\n  return Ellipse;\n}();\n\n/**\n * A class to define a shape via user defined coordinates.\n * @memberof PIXI\n */\nvar Polygon = /** @class */function () {\n  /**\n   * @param {PIXI.IPointData[]|number[]} points - This can be an array of Points\n   *  that form the polygon, a flat array of numbers that will be interpreted as [x,y, x,y, ...], or\n   *  the arguments passed can be all the points of the polygon e.g.\n   *  `new PIXI.Polygon(new PIXI.Point(), new PIXI.Point(), ...)`, or the arguments passed can be flat\n   *  x,y values e.g. `new Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are Numbers.\n   */\n  function Polygon() {\n    var arguments$1 = arguments;\n    var points = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      points[_i] = arguments$1[_i];\n    }\n    var flat = Array.isArray(points[0]) ? points[0] : points;\n    // if this is an array of points, convert it to a flat array of numbers\n    if (typeof flat[0] !== 'number') {\n      var p = [];\n      for (var i = 0, il = flat.length; i < il; i++) {\n        p.push(flat[i].x, flat[i].y);\n      }\n      flat = p;\n    }\n    this.points = flat;\n    this.type = SHAPES.POLY;\n    this.closeStroke = true;\n  }\n  /**\n   * Creates a clone of this polygon.\n   * @returns - A copy of the polygon.\n   */\n  Polygon.prototype.clone = function () {\n    var points = this.points.slice();\n    var polygon = new Polygon(points);\n    polygon.closeStroke = this.closeStroke;\n    return polygon;\n  };\n  /**\n   * Checks whether the x and y coordinates passed to this function are contained within this polygon.\n   * @param x - The X coordinate of the point to test.\n   * @param y - The Y coordinate of the point to test.\n   * @returns - Whether the x/y coordinates are within this polygon.\n   */\n  Polygon.prototype.contains = function (x, y) {\n    var inside = false;\n    // use some raycasting to test hits\n    // https://github.com/substack/point-in-polygon/blob/master/index.js\n    var length = this.points.length / 2;\n    for (var i = 0, j = length - 1; i < length; j = i++) {\n      var xi = this.points[i * 2];\n      var yi = this.points[i * 2 + 1];\n      var xj = this.points[j * 2];\n      var yj = this.points[j * 2 + 1];\n      var intersect = yi > y !== yj > y && x < (xj - xi) * ((y - yi) / (yj - yi)) + xi;\n      if (intersect) {\n        inside = !inside;\n      }\n    }\n    return inside;\n  };\n  Polygon.prototype.toString = function () {\n    return \"[@pixi/math:Polygon\" + (\"closeStroke=\" + this.closeStroke) + (\"points=\" + this.points.reduce(function (pointsDesc, currentPoint) {\n      return pointsDesc + \", \" + currentPoint;\n    }, '') + \"]\");\n  };\n  return Polygon;\n}();\n\n/**\n * The Rounded Rectangle object is an area that has nice rounded corners, as indicated by its\n * top-left corner point (x, y) and by its width and its height and its radius.\n * @memberof PIXI\n */\nvar RoundedRectangle = /** @class */function () {\n  /**\n   * @param x - The X coordinate of the upper-left corner of the rounded rectangle\n   * @param y - The Y coordinate of the upper-left corner of the rounded rectangle\n   * @param width - The overall width of this rounded rectangle\n   * @param height - The overall height of this rounded rectangle\n   * @param radius - Controls the radius of the rounded corners\n   */\n  function RoundedRectangle(x, y, width, height, radius) {\n    if (x === void 0) {\n      x = 0;\n    }\n    if (y === void 0) {\n      y = 0;\n    }\n    if (width === void 0) {\n      width = 0;\n    }\n    if (height === void 0) {\n      height = 0;\n    }\n    if (radius === void 0) {\n      radius = 20;\n    }\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    this.radius = radius;\n    this.type = SHAPES.RREC;\n  }\n  /**\n   * Creates a clone of this Rounded Rectangle.\n   * @returns - A copy of the rounded rectangle.\n   */\n  RoundedRectangle.prototype.clone = function () {\n    return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);\n  };\n  /**\n   * Checks whether the x and y coordinates given are contained within this Rounded Rectangle\n   * @param x - The X coordinate of the point to test.\n   * @param y - The Y coordinate of the point to test.\n   * @returns - Whether the x/y coordinates are within this Rounded Rectangle.\n   */\n  RoundedRectangle.prototype.contains = function (x, y) {\n    if (this.width <= 0 || this.height <= 0) {\n      return false;\n    }\n    if (x >= this.x && x <= this.x + this.width) {\n      if (y >= this.y && y <= this.y + this.height) {\n        var radius = Math.max(0, Math.min(this.radius, Math.min(this.width, this.height) / 2));\n        if (y >= this.y + radius && y <= this.y + this.height - radius || x >= this.x + radius && x <= this.x + this.width - radius) {\n          return true;\n        }\n        var dx = x - (this.x + radius);\n        var dy = y - (this.y + radius);\n        var radius2 = radius * radius;\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n        dx = x - (this.x + this.width - radius);\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n        dy = y - (this.y + this.height - radius);\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n        dx = x - (this.x + radius);\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  RoundedRectangle.prototype.toString = function () {\n    return \"[@pixi/math:RoundedRectangle x=\" + this.x + \" y=\" + this.y + (\"width=\" + this.width + \" height=\" + this.height + \" radius=\" + this.radius + \"]\");\n  };\n  return RoundedRectangle;\n}();\n\n/**\n * The ObservablePoint object represents a location in a two-dimensional coordinate system, where `x` represents\n * the position on the horizontal axis and `y` represents the position on the vertical axis.\n *\n * An `ObservablePoint` is a point that triggers a callback when the point's position is changed.\n * @memberof PIXI\n */\nvar ObservablePoint = /** @class */function () {\n  /**\n   * Creates a new `ObservablePoint`\n   * @param cb - callback function triggered when `x` and/or `y` are changed\n   * @param scope - owner of callback\n   * @param {number} [x=0] - position of the point on the x axis\n   * @param {number} [y=0] - position of the point on the y axis\n   */\n  function ObservablePoint(cb, scope, x, y) {\n    if (x === void 0) {\n      x = 0;\n    }\n    if (y === void 0) {\n      y = 0;\n    }\n    this._x = x;\n    this._y = y;\n    this.cb = cb;\n    this.scope = scope;\n  }\n  /**\n   * Creates a clone of this point.\n   * The callback and scope params can be overridden otherwise they will default\n   * to the clone object's values.\n   * @override\n   * @param cb - The callback function triggered when `x` and/or `y` are changed\n   * @param scope - The owner of the callback\n   * @returns a copy of this observable point\n   */\n  ObservablePoint.prototype.clone = function (cb, scope) {\n    if (cb === void 0) {\n      cb = this.cb;\n    }\n    if (scope === void 0) {\n      scope = this.scope;\n    }\n    return new ObservablePoint(cb, scope, this._x, this._y);\n  };\n  /**\n   * Sets the point to a new `x` and `y` position.\n   * If `y` is omitted, both `x` and `y` will be set to `x`.\n   * @param {number} [x=0] - position of the point on the x axis\n   * @param {number} [y=x] - position of the point on the y axis\n   * @returns The observable point instance itself\n   */\n  ObservablePoint.prototype.set = function (x, y) {\n    if (x === void 0) {\n      x = 0;\n    }\n    if (y === void 0) {\n      y = x;\n    }\n    if (this._x !== x || this._y !== y) {\n      this._x = x;\n      this._y = y;\n      this.cb.call(this.scope);\n    }\n    return this;\n  };\n  /**\n   * Copies x and y from the given point (`p`)\n   * @param p - The point to copy from. Can be any of type that is or extends `IPointData`\n   * @returns The observable point instance itself\n   */\n  ObservablePoint.prototype.copyFrom = function (p) {\n    if (this._x !== p.x || this._y !== p.y) {\n      this._x = p.x;\n      this._y = p.y;\n      this.cb.call(this.scope);\n    }\n    return this;\n  };\n  /**\n   * Copies this point's x and y into that of the given point (`p`)\n   * @param p - The point to copy to. Can be any of type that is or extends `IPointData`\n   * @returns The point (`p`) with values updated\n   */\n  ObservablePoint.prototype.copyTo = function (p) {\n    p.set(this._x, this._y);\n    return p;\n  };\n  /**\n   * Accepts another point (`p`) and returns `true` if the given point is equal to this point\n   * @param p - The point to check\n   * @returns Returns `true` if both `x` and `y` are equal\n   */\n  ObservablePoint.prototype.equals = function (p) {\n    return p.x === this._x && p.y === this._y;\n  };\n  ObservablePoint.prototype.toString = function () {\n    return \"[@pixi/math:ObservablePoint x=\" + 0 + \" y=\" + 0 + \" scope=\" + this.scope + \"]\";\n  };\n  Object.defineProperty(ObservablePoint.prototype, \"x\", {\n    /** Position of the observable point on the x axis. */\n    get: function () {\n      return this._x;\n    },\n    set: function (value) {\n      if (this._x !== value) {\n        this._x = value;\n        this.cb.call(this.scope);\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ObservablePoint.prototype, \"y\", {\n    /** Position of the observable point on the y axis. */\n    get: function () {\n      return this._y;\n    },\n    set: function (value) {\n      if (this._y !== value) {\n        this._y = value;\n        this.cb.call(this.scope);\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return ObservablePoint;\n}();\n\n/**\n * The PixiJS Matrix as a class makes it a lot faster.\n *\n * Here is a representation of it:\n * ```js\n * | a | c | tx|\n * | b | d | ty|\n * | 0 | 0 | 1 |\n * ```\n * @memberof PIXI\n */\nvar Matrix = /** @class */function () {\n  /**\n   * @param a - x scale\n   * @param b - y skew\n   * @param c - x skew\n   * @param d - y scale\n   * @param tx - x translation\n   * @param ty - y translation\n   */\n  function Matrix(a, b, c, d, tx, ty) {\n    if (a === void 0) {\n      a = 1;\n    }\n    if (b === void 0) {\n      b = 0;\n    }\n    if (c === void 0) {\n      c = 0;\n    }\n    if (d === void 0) {\n      d = 1;\n    }\n    if (tx === void 0) {\n      tx = 0;\n    }\n    if (ty === void 0) {\n      ty = 0;\n    }\n    this.array = null;\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n    this.tx = tx;\n    this.ty = ty;\n  }\n  /**\n   * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:\n   *\n   * a = array[0]\n   * b = array[1]\n   * c = array[3]\n   * d = array[4]\n   * tx = array[2]\n   * ty = array[5]\n   * @param array - The array that the matrix will be populated from.\n   */\n  Matrix.prototype.fromArray = function (array) {\n    this.a = array[0];\n    this.b = array[1];\n    this.c = array[3];\n    this.d = array[4];\n    this.tx = array[2];\n    this.ty = array[5];\n  };\n  /**\n   * Sets the matrix properties.\n   * @param a - Matrix component\n   * @param b - Matrix component\n   * @param c - Matrix component\n   * @param d - Matrix component\n   * @param tx - Matrix component\n   * @param ty - Matrix component\n   * @returns This matrix. Good for chaining method calls.\n   */\n  Matrix.prototype.set = function (a, b, c, d, tx, ty) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n    this.tx = tx;\n    this.ty = ty;\n    return this;\n  };\n  /**\n   * Creates an array from the current Matrix object.\n   * @param transpose - Whether we need to transpose the matrix or not\n   * @param [out=new Float32Array(9)] - If provided the array will be assigned to out\n   * @returns The newly created array which contains the matrix\n   */\n  Matrix.prototype.toArray = function (transpose, out) {\n    if (!this.array) {\n      this.array = new Float32Array(9);\n    }\n    var array = out || this.array;\n    if (transpose) {\n      array[0] = this.a;\n      array[1] = this.b;\n      array[2] = 0;\n      array[3] = this.c;\n      array[4] = this.d;\n      array[5] = 0;\n      array[6] = this.tx;\n      array[7] = this.ty;\n      array[8] = 1;\n    } else {\n      array[0] = this.a;\n      array[1] = this.c;\n      array[2] = this.tx;\n      array[3] = this.b;\n      array[4] = this.d;\n      array[5] = this.ty;\n      array[6] = 0;\n      array[7] = 0;\n      array[8] = 1;\n    }\n    return array;\n  };\n  /**\n   * Get a new position with the current transformation applied.\n   * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)\n   * @param pos - The origin\n   * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n   * @returns {PIXI.Point} The new point, transformed through this matrix\n   */\n  Matrix.prototype.apply = function (pos, newPos) {\n    newPos = newPos || new Point();\n    var x = pos.x;\n    var y = pos.y;\n    newPos.x = this.a * x + this.c * y + this.tx;\n    newPos.y = this.b * x + this.d * y + this.ty;\n    return newPos;\n  };\n  /**\n   * Get a new position with the inverse of the current transformation applied.\n   * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)\n   * @param pos - The origin\n   * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n   * @returns {PIXI.Point} The new point, inverse-transformed through this matrix\n   */\n  Matrix.prototype.applyInverse = function (pos, newPos) {\n    newPos = newPos || new Point();\n    var id = 1 / (this.a * this.d + this.c * -this.b);\n    var x = pos.x;\n    var y = pos.y;\n    newPos.x = this.d * id * x + -this.c * id * y + (this.ty * this.c - this.tx * this.d) * id;\n    newPos.y = this.a * id * y + -this.b * id * x + (-this.ty * this.a + this.tx * this.b) * id;\n    return newPos;\n  };\n  /**\n   * Translates the matrix on the x and y.\n   * @param x - How much to translate x by\n   * @param y - How much to translate y by\n   * @returns This matrix. Good for chaining method calls.\n   */\n  Matrix.prototype.translate = function (x, y) {\n    this.tx += x;\n    this.ty += y;\n    return this;\n  };\n  /**\n   * Applies a scale transformation to the matrix.\n   * @param x - The amount to scale horizontally\n   * @param y - The amount to scale vertically\n   * @returns This matrix. Good for chaining method calls.\n   */\n  Matrix.prototype.scale = function (x, y) {\n    this.a *= x;\n    this.d *= y;\n    this.c *= x;\n    this.b *= y;\n    this.tx *= x;\n    this.ty *= y;\n    return this;\n  };\n  /**\n   * Applies a rotation transformation to the matrix.\n   * @param angle - The angle in radians.\n   * @returns This matrix. Good for chaining method calls.\n   */\n  Matrix.prototype.rotate = function (angle) {\n    var cos = Math.cos(angle);\n    var sin = Math.sin(angle);\n    var a1 = this.a;\n    var c1 = this.c;\n    var tx1 = this.tx;\n    this.a = a1 * cos - this.b * sin;\n    this.b = a1 * sin + this.b * cos;\n    this.c = c1 * cos - this.d * sin;\n    this.d = c1 * sin + this.d * cos;\n    this.tx = tx1 * cos - this.ty * sin;\n    this.ty = tx1 * sin + this.ty * cos;\n    return this;\n  };\n  /**\n   * Appends the given Matrix to this Matrix.\n   * @param matrix - The matrix to append.\n   * @returns This matrix. Good for chaining method calls.\n   */\n  Matrix.prototype.append = function (matrix) {\n    var a1 = this.a;\n    var b1 = this.b;\n    var c1 = this.c;\n    var d1 = this.d;\n    this.a = matrix.a * a1 + matrix.b * c1;\n    this.b = matrix.a * b1 + matrix.b * d1;\n    this.c = matrix.c * a1 + matrix.d * c1;\n    this.d = matrix.c * b1 + matrix.d * d1;\n    this.tx = matrix.tx * a1 + matrix.ty * c1 + this.tx;\n    this.ty = matrix.tx * b1 + matrix.ty * d1 + this.ty;\n    return this;\n  };\n  /**\n   * Sets the matrix based on all the available properties\n   * @param x - Position on the x axis\n   * @param y - Position on the y axis\n   * @param pivotX - Pivot on the x axis\n   * @param pivotY - Pivot on the y axis\n   * @param scaleX - Scale on the x axis\n   * @param scaleY - Scale on the y axis\n   * @param rotation - Rotation in radians\n   * @param skewX - Skew on the x axis\n   * @param skewY - Skew on the y axis\n   * @returns This matrix. Good for chaining method calls.\n   */\n  Matrix.prototype.setTransform = function (x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) {\n    this.a = Math.cos(rotation + skewY) * scaleX;\n    this.b = Math.sin(rotation + skewY) * scaleX;\n    this.c = -Math.sin(rotation - skewX) * scaleY;\n    this.d = Math.cos(rotation - skewX) * scaleY;\n    this.tx = x - (pivotX * this.a + pivotY * this.c);\n    this.ty = y - (pivotX * this.b + pivotY * this.d);\n    return this;\n  };\n  /**\n   * Prepends the given Matrix to this Matrix.\n   * @param matrix - The matrix to prepend\n   * @returns This matrix. Good for chaining method calls.\n   */\n  Matrix.prototype.prepend = function (matrix) {\n    var tx1 = this.tx;\n    if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1) {\n      var a1 = this.a;\n      var c1 = this.c;\n      this.a = a1 * matrix.a + this.b * matrix.c;\n      this.b = a1 * matrix.b + this.b * matrix.d;\n      this.c = c1 * matrix.a + this.d * matrix.c;\n      this.d = c1 * matrix.b + this.d * matrix.d;\n    }\n    this.tx = tx1 * matrix.a + this.ty * matrix.c + matrix.tx;\n    this.ty = tx1 * matrix.b + this.ty * matrix.d + matrix.ty;\n    return this;\n  };\n  /**\n   * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.\n   * @param transform - The transform to apply the properties to.\n   * @returns The transform with the newly applied properties\n   */\n  Matrix.prototype.decompose = function (transform) {\n    // sort out rotation / skew..\n    var a = this.a;\n    var b = this.b;\n    var c = this.c;\n    var d = this.d;\n    var pivot = transform.pivot;\n    var skewX = -Math.atan2(-c, d);\n    var skewY = Math.atan2(b, a);\n    var delta = Math.abs(skewX + skewY);\n    if (delta < 0.00001 || Math.abs(PI_2 - delta) < 0.00001) {\n      transform.rotation = skewY;\n      transform.skew.x = transform.skew.y = 0;\n    } else {\n      transform.rotation = 0;\n      transform.skew.x = skewX;\n      transform.skew.y = skewY;\n    }\n    // next set scale\n    transform.scale.x = Math.sqrt(a * a + b * b);\n    transform.scale.y = Math.sqrt(c * c + d * d);\n    // next set position\n    transform.position.x = this.tx + (pivot.x * a + pivot.y * c);\n    transform.position.y = this.ty + (pivot.x * b + pivot.y * d);\n    return transform;\n  };\n  /**\n   * Inverts this matrix\n   * @returns This matrix. Good for chaining method calls.\n   */\n  Matrix.prototype.invert = function () {\n    var a1 = this.a;\n    var b1 = this.b;\n    var c1 = this.c;\n    var d1 = this.d;\n    var tx1 = this.tx;\n    var n = a1 * d1 - b1 * c1;\n    this.a = d1 / n;\n    this.b = -b1 / n;\n    this.c = -c1 / n;\n    this.d = a1 / n;\n    this.tx = (c1 * this.ty - d1 * tx1) / n;\n    this.ty = -(a1 * this.ty - b1 * tx1) / n;\n    return this;\n  };\n  /**\n   * Resets this Matrix to an identity (default) matrix.\n   * @returns This matrix. Good for chaining method calls.\n   */\n  Matrix.prototype.identity = function () {\n    this.a = 1;\n    this.b = 0;\n    this.c = 0;\n    this.d = 1;\n    this.tx = 0;\n    this.ty = 0;\n    return this;\n  };\n  /**\n   * Creates a new Matrix object with the same values as this one.\n   * @returns A copy of this matrix. Good for chaining method calls.\n   */\n  Matrix.prototype.clone = function () {\n    var matrix = new Matrix();\n    matrix.a = this.a;\n    matrix.b = this.b;\n    matrix.c = this.c;\n    matrix.d = this.d;\n    matrix.tx = this.tx;\n    matrix.ty = this.ty;\n    return matrix;\n  };\n  /**\n   * Changes the values of the given matrix to be the same as the ones in this matrix\n   * @param matrix - The matrix to copy to.\n   * @returns The matrix given in parameter with its values updated.\n   */\n  Matrix.prototype.copyTo = function (matrix) {\n    matrix.a = this.a;\n    matrix.b = this.b;\n    matrix.c = this.c;\n    matrix.d = this.d;\n    matrix.tx = this.tx;\n    matrix.ty = this.ty;\n    return matrix;\n  };\n  /**\n   * Changes the values of the matrix to be the same as the ones in given matrix\n   * @param {PIXI.Matrix} matrix - The matrix to copy from.\n   * @returns {PIXI.Matrix} this\n   */\n  Matrix.prototype.copyFrom = function (matrix) {\n    this.a = matrix.a;\n    this.b = matrix.b;\n    this.c = matrix.c;\n    this.d = matrix.d;\n    this.tx = matrix.tx;\n    this.ty = matrix.ty;\n    return this;\n  };\n  Matrix.prototype.toString = function () {\n    return \"[@pixi/math:Matrix a=\" + this.a + \" b=\" + this.b + \" c=\" + this.c + \" d=\" + this.d + \" tx=\" + this.tx + \" ty=\" + this.ty + \"]\";\n  };\n  Object.defineProperty(Matrix, \"IDENTITY\", {\n    /**\n     * A default (identity) matrix\n     * @readonly\n     */\n    get: function () {\n      return new Matrix();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Matrix, \"TEMP_MATRIX\", {\n    /**\n     * A temp matrix\n     * @readonly\n     */\n    get: function () {\n      return new Matrix();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Matrix;\n}();\n\n// Your friendly neighbour https://en.wikipedia.org/wiki/Dihedral_group\n/*\n * Transform matrix for operation n is:\n * | ux | vx |\n * | uy | vy |\n */\nvar ux = [1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1, 0, 1];\nvar uy = [0, 1, 1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1];\nvar vx = [0, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1];\nvar vy = [1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, 1, 1, 1, 0, -1];\n/**\n * [Cayley Table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n * for the composition of each rotation in the dihederal group D8.\n * @type {number[][]}\n * @private\n */\nvar rotationCayley = [];\n/**\n * Matrices for each `GD8Symmetry` rotation.\n * @type {PIXI.Matrix[]}\n * @private\n */\nvar rotationMatrices = [];\n/*\n * Alias for {@code Math.sign}.\n */\nvar signum = Math.sign;\n/*\n * Initializes `rotationCayley` and `rotationMatrices`. It is called\n * only once below.\n */\nfunction init() {\n  for (var i = 0; i < 16; i++) {\n    var row = [];\n    rotationCayley.push(row);\n    for (var j = 0; j < 16; j++) {\n      /* Multiplies rotation matrices i and j. */\n      var _ux = signum(ux[i] * ux[j] + vx[i] * uy[j]);\n      var _uy = signum(uy[i] * ux[j] + vy[i] * uy[j]);\n      var _vx = signum(ux[i] * vx[j] + vx[i] * vy[j]);\n      var _vy = signum(uy[i] * vx[j] + vy[i] * vy[j]);\n      /* Finds rotation matrix matching the product and pushes it. */\n      for (var k = 0; k < 16; k++) {\n        if (ux[k] === _ux && uy[k] === _uy && vx[k] === _vx && vy[k] === _vy) {\n          row.push(k);\n          break;\n        }\n      }\n    }\n  }\n  for (var i = 0; i < 16; i++) {\n    var mat = new Matrix();\n    mat.set(ux[i], uy[i], vx[i], vy[i], 0, 0);\n    rotationMatrices.push(mat);\n  }\n}\ninit();\n/**\n * @memberof PIXI\n * @typedef {number} GD8Symmetry\n * @see PIXI.groupD8\n */\n/**\n * Implements the dihedral group D8, which is similar to\n * [group D4]{@link http://mathworld.wolfram.com/DihedralGroupD4.html};\n * D8 is the same but with diagonals, and it is used for texture\n * rotations.\n *\n * The directions the U- and V- axes after rotation\n * of an angle of `a: GD8Constant` are the vectors `(uX(a), uY(a))`\n * and `(vX(a), vY(a))`. These aren't necessarily unit vectors.\n *\n * **Origin:**<br>\n *  This is the small part of gameofbombs.com portal system. It works.\n * @see PIXI.groupD8.E\n * @see PIXI.groupD8.SE\n * @see PIXI.groupD8.S\n * @see PIXI.groupD8.SW\n * @see PIXI.groupD8.W\n * @see PIXI.groupD8.NW\n * @see PIXI.groupD8.N\n * @see PIXI.groupD8.NE\n * @author Ivan @ivanpopelyshev\n * @namespace PIXI.groupD8\n * @memberof PIXI\n */\nvar groupD8 = {\n  /**\n   * | Rotation | Direction |\n   * |----------|-----------|\n   * | 0°       | East      |\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  E: 0,\n  /**\n   * | Rotation | Direction |\n   * |----------|-----------|\n   * | 45°↻     | Southeast |\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  SE: 1,\n  /**\n   * | Rotation | Direction |\n   * |----------|-----------|\n   * | 90°↻     | South     |\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  S: 2,\n  /**\n   * | Rotation | Direction |\n   * |----------|-----------|\n   * | 135°↻    | Southwest |\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  SW: 3,\n  /**\n   * | Rotation | Direction |\n   * |----------|-----------|\n   * | 180°     | West      |\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  W: 4,\n  /**\n   * | Rotation    | Direction    |\n   * |-------------|--------------|\n   * | -135°/225°↻ | Northwest    |\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  NW: 5,\n  /**\n   * | Rotation    | Direction    |\n   * |-------------|--------------|\n   * | -90°/270°↻  | North        |\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  N: 6,\n  /**\n   * | Rotation    | Direction    |\n   * |-------------|--------------|\n   * | -45°/315°↻  | Northeast    |\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  NE: 7,\n  /**\n   * Reflection about Y-axis.\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  MIRROR_VERTICAL: 8,\n  /**\n   * Reflection about the main diagonal.\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  MAIN_DIAGONAL: 10,\n  /**\n   * Reflection about X-axis.\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  MIRROR_HORIZONTAL: 12,\n  /**\n   * Reflection about reverse diagonal.\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  REVERSE_DIAGONAL: 14,\n  /**\n   * @memberof PIXI.groupD8\n   * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n   * @returns {PIXI.GD8Symmetry} The X-component of the U-axis\n   *    after rotating the axes.\n   */\n  uX: function (ind) {\n    return ux[ind];\n  },\n  /**\n   * @memberof PIXI.groupD8\n   * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n   * @returns {PIXI.GD8Symmetry} The Y-component of the U-axis\n   *    after rotating the axes.\n   */\n  uY: function (ind) {\n    return uy[ind];\n  },\n  /**\n   * @memberof PIXI.groupD8\n   * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n   * @returns {PIXI.GD8Symmetry} The X-component of the V-axis\n   *    after rotating the axes.\n   */\n  vX: function (ind) {\n    return vx[ind];\n  },\n  /**\n   * @memberof PIXI.groupD8\n   * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n   * @returns {PIXI.GD8Symmetry} The Y-component of the V-axis\n   *    after rotating the axes.\n   */\n  vY: function (ind) {\n    return vy[ind];\n  },\n  /**\n   * @memberof PIXI.groupD8\n   * @param {PIXI.GD8Symmetry} rotation - symmetry whose opposite\n   *   is needed. Only rotations have opposite symmetries while\n   *   reflections don't.\n   * @returns {PIXI.GD8Symmetry} The opposite symmetry of `rotation`\n   */\n  inv: function (rotation) {\n    if (rotation & 8)\n      // true only if between 8 & 15 (reflections)\n      {\n        return rotation & 15; // or rotation % 16\n      }\n    return -rotation & 7; // or (8 - rotation) % 8\n  },\n  /**\n   * Composes the two D8 operations.\n   *\n   * Taking `^` as reflection:\n   *\n   * |       | E=0 | S=2 | W=4 | N=6 | E^=8 | S^=10 | W^=12 | N^=14 |\n   * |-------|-----|-----|-----|-----|------|-------|-------|-------|\n   * | E=0   | E   | S   | W   | N   | E^   | S^    | W^    | N^    |\n   * | S=2   | S   | W   | N   | E   | S^   | W^    | N^    | E^    |\n   * | W=4   | W   | N   | E   | S   | W^   | N^    | E^    | S^    |\n   * | N=6   | N   | E   | S   | W   | N^   | E^    | S^    | W^    |\n   * | E^=8  | E^  | N^  | W^  | S^  | E    | N     | W     | S     |\n   * | S^=10 | S^  | E^  | N^  | W^  | S    | E     | N     | W     |\n   * | W^=12 | W^  | S^  | E^  | N^  | W    | S     | E     | N     |\n   * | N^=14 | N^  | W^  | S^  | E^  | N    | W     | S     | E     |\n   *\n   * [This is a Cayley table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n   * @memberof PIXI.groupD8\n   * @param {PIXI.GD8Symmetry} rotationSecond - Second operation, which\n   *   is the row in the above cayley table.\n   * @param {PIXI.GD8Symmetry} rotationFirst - First operation, which\n   *   is the column in the above cayley table.\n   * @returns {PIXI.GD8Symmetry} Composed operation\n   */\n  add: function (rotationSecond, rotationFirst) {\n    return rotationCayley[rotationSecond][rotationFirst];\n  },\n  /**\n   * Reverse of `add`.\n   * @memberof PIXI.groupD8\n   * @param {PIXI.GD8Symmetry} rotationSecond - Second operation\n   * @param {PIXI.GD8Symmetry} rotationFirst - First operation\n   * @returns {PIXI.GD8Symmetry} Result\n   */\n  sub: function (rotationSecond, rotationFirst) {\n    return rotationCayley[rotationSecond][groupD8.inv(rotationFirst)];\n  },\n  /**\n   * Adds 180 degrees to rotation, which is a commutative\n   * operation.\n   * @memberof PIXI.groupD8\n   * @param {number} rotation - The number to rotate.\n   * @returns {number} Rotated number\n   */\n  rotate180: function (rotation) {\n    return rotation ^ 4;\n  },\n  /**\n   * Checks if the rotation angle is vertical, i.e. south\n   * or north. It doesn't work for reflections.\n   * @memberof PIXI.groupD8\n   * @param {PIXI.GD8Symmetry} rotation - The number to check.\n   * @returns {boolean} Whether or not the direction is vertical\n   */\n  isVertical: function (rotation) {\n    return (rotation & 3) === 2;\n  },\n  /**\n   * Approximates the vector `V(dx,dy)` into one of the\n   * eight directions provided by `groupD8`.\n   * @memberof PIXI.groupD8\n   * @param {number} dx - X-component of the vector\n   * @param {number} dy - Y-component of the vector\n   * @returns {PIXI.GD8Symmetry} Approximation of the vector into\n   *  one of the eight symmetries.\n   */\n  byDirection: function (dx, dy) {\n    if (Math.abs(dx) * 2 <= Math.abs(dy)) {\n      if (dy >= 0) {\n        return groupD8.S;\n      }\n      return groupD8.N;\n    } else if (Math.abs(dy) * 2 <= Math.abs(dx)) {\n      if (dx > 0) {\n        return groupD8.E;\n      }\n      return groupD8.W;\n    } else if (dy > 0) {\n      if (dx > 0) {\n        return groupD8.SE;\n      }\n      return groupD8.SW;\n    } else if (dx > 0) {\n      return groupD8.NE;\n    }\n    return groupD8.NW;\n  },\n  /**\n   * Helps sprite to compensate texture packer rotation.\n   * @memberof PIXI.groupD8\n   * @param {PIXI.Matrix} matrix - sprite world matrix\n   * @param {PIXI.GD8Symmetry} rotation - The rotation factor to use.\n   * @param {number} tx - sprite anchoring\n   * @param {number} ty - sprite anchoring\n   */\n  matrixAppendRotationInv: function (matrix, rotation, tx, ty) {\n    if (tx === void 0) {\n      tx = 0;\n    }\n    if (ty === void 0) {\n      ty = 0;\n    }\n    // Packer used \"rotation\", we use \"inv(rotation)\"\n    var mat = rotationMatrices[groupD8.inv(rotation)];\n    mat.tx = tx;\n    mat.ty = ty;\n    matrix.append(mat);\n  }\n};\n\n/**\n * Transform that takes care about its versions.\n * @memberof PIXI\n */\nvar Transform = /** @class */function () {\n  function Transform() {\n    this.worldTransform = new Matrix();\n    this.localTransform = new Matrix();\n    this.position = new ObservablePoint(this.onChange, this, 0, 0);\n    this.scale = new ObservablePoint(this.onChange, this, 1, 1);\n    this.pivot = new ObservablePoint(this.onChange, this, 0, 0);\n    this.skew = new ObservablePoint(this.updateSkew, this, 0, 0);\n    this._rotation = 0;\n    this._cx = 1;\n    this._sx = 0;\n    this._cy = 0;\n    this._sy = 1;\n    this._localID = 0;\n    this._currentLocalID = 0;\n    this._worldID = 0;\n    this._parentID = 0;\n  }\n  /** Called when a value changes. */\n  Transform.prototype.onChange = function () {\n    this._localID++;\n  };\n  /** Called when the skew or the rotation changes. */\n  Transform.prototype.updateSkew = function () {\n    this._cx = Math.cos(this._rotation + this.skew.y);\n    this._sx = Math.sin(this._rotation + this.skew.y);\n    this._cy = -Math.sin(this._rotation - this.skew.x); // cos, added PI/2\n    this._sy = Math.cos(this._rotation - this.skew.x); // sin, added PI/2\n    this._localID++;\n  };\n  Transform.prototype.toString = function () {\n    return \"[@pixi/math:Transform \" + (\"position=(\" + this.position.x + \", \" + this.position.y + \") \") + (\"rotation=\" + this.rotation + \" \") + (\"scale=(\" + this.scale.x + \", \" + this.scale.y + \") \") + (\"skew=(\" + this.skew.x + \", \" + this.skew.y + \") \") + \"]\";\n  };\n  /** Updates the local transformation matrix. */\n  Transform.prototype.updateLocalTransform = function () {\n    var lt = this.localTransform;\n    if (this._localID !== this._currentLocalID) {\n      // get the matrix values of the displayobject based on its transform properties..\n      lt.a = this._cx * this.scale.x;\n      lt.b = this._sx * this.scale.x;\n      lt.c = this._cy * this.scale.y;\n      lt.d = this._sy * this.scale.y;\n      lt.tx = this.position.x - (this.pivot.x * lt.a + this.pivot.y * lt.c);\n      lt.ty = this.position.y - (this.pivot.x * lt.b + this.pivot.y * lt.d);\n      this._currentLocalID = this._localID;\n      // force an update..\n      this._parentID = -1;\n    }\n  };\n  /**\n   * Updates the local and the world transformation matrices.\n   * @param parentTransform - The parent transform\n   */\n  Transform.prototype.updateTransform = function (parentTransform) {\n    var lt = this.localTransform;\n    if (this._localID !== this._currentLocalID) {\n      // get the matrix values of the displayobject based on its transform properties..\n      lt.a = this._cx * this.scale.x;\n      lt.b = this._sx * this.scale.x;\n      lt.c = this._cy * this.scale.y;\n      lt.d = this._sy * this.scale.y;\n      lt.tx = this.position.x - (this.pivot.x * lt.a + this.pivot.y * lt.c);\n      lt.ty = this.position.y - (this.pivot.x * lt.b + this.pivot.y * lt.d);\n      this._currentLocalID = this._localID;\n      // force an update..\n      this._parentID = -1;\n    }\n    if (this._parentID !== parentTransform._worldID) {\n      // concat the parent matrix with the objects transform.\n      var pt = parentTransform.worldTransform;\n      var wt = this.worldTransform;\n      wt.a = lt.a * pt.a + lt.b * pt.c;\n      wt.b = lt.a * pt.b + lt.b * pt.d;\n      wt.c = lt.c * pt.a + lt.d * pt.c;\n      wt.d = lt.c * pt.b + lt.d * pt.d;\n      wt.tx = lt.tx * pt.a + lt.ty * pt.c + pt.tx;\n      wt.ty = lt.tx * pt.b + lt.ty * pt.d + pt.ty;\n      this._parentID = parentTransform._worldID;\n      // update the id of the transform..\n      this._worldID++;\n    }\n  };\n  /**\n   * Decomposes a matrix and sets the transforms properties based on it.\n   * @param matrix - The matrix to decompose\n   */\n  Transform.prototype.setFromMatrix = function (matrix) {\n    matrix.decompose(this);\n    this._localID++;\n  };\n  Object.defineProperty(Transform.prototype, \"rotation\", {\n    /** The rotation of the object in radians. */\n    get: function () {\n      return this._rotation;\n    },\n    set: function (value) {\n      if (this._rotation !== value) {\n        this._rotation = value;\n        this.updateSkew();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** A default (identity) transform. */\n  Transform.IDENTITY = new Transform();\n  return Transform;\n}();\nexport { Circle, DEG_TO_RAD, Ellipse, Matrix, ObservablePoint, PI_2, Point, Polygon, RAD_TO_DEG, Rectangle, RoundedRectangle, SHAPES, Transform, groupD8 };","map":{"version":3,"names":["PI_2","Math","PI","RAD_TO_DEG","DEG_TO_RAD","SHAPES","Point","x","y","prototype","clone","copyFrom","p","set","copyTo","equals","toString","tempPoints","Rectangle","width","height","Number","type","RECT","Object","defineProperty","get","rectangle","contains","intersects","other","transform","x0_1","x1_1","right","y0_1","y1_1","bottom","x0","left","x1","y0","top","y1","lt","lb","rt","rb","s","sign","a","d","b","c","apply","max","min","nx","ny","n00","n10","n01","n11","mx","my","m00","m10","m01","m11","pad","paddingX","paddingY","fit","x2","y2","ceil","resolution","eps","floor","enlarge","Circle","radius","CIRC","r2","dx","dy","getBounds","Ellipse","halfWidth","halfHeight","ELIP","normx","normy","Polygon","points","_i","arguments","length","arguments$1","flat","Array","isArray","i","il","push","POLY","closeStroke","slice","polygon","inside","j","xi","yi","xj","yj","intersect","reduce","pointsDesc","currentPoint","RoundedRectangle","RREC","radius2","ObservablePoint","cb","scope","_x","_y","call","value","Matrix","tx","ty","array","fromArray","toArray","transpose","out","Float32Array","pos","newPos","applyInverse","id","translate","scale","rotate","angle","cos","sin","a1","c1","tx1","append","matrix","b1","d1","setTransform","pivotX","pivotY","scaleX","scaleY","rotation","skewX","skewY","prepend","decompose","pivot","atan2","delta","abs","skew","sqrt","position","invert","n","identity","ux","uy","vx","vy","rotationCayley","rotationMatrices","signum","init","row","_ux","_uy","_vx","_vy","k","mat","groupD8","E","SE","S","SW","W","NW","N","NE","MIRROR_VERTICAL","MAIN_DIAGONAL","MIRROR_HORIZONTAL","REVERSE_DIAGONAL","uX","ind","uY","vX","vY","inv","add","rotationSecond","rotationFirst","sub","rotate180","isVertical","byDirection","matrixAppendRotationInv","Transform","worldTransform","localTransform","onChange","updateSkew","_rotation","_cx","_sx","_cy","_sy","_localID","_currentLocalID","_worldID","_parentID","updateLocalTransform","updateTransform","parentTransform","pt","wt","setFromMatrix","IDENTITY"],"sources":["C:\\Users\\Owner\\Desktop\\python\\TTS-systeam\\TTS-Systeam\\web-tts\\node_modules\\@pixi\\math\\src\\const.ts","C:\\Users\\Owner\\Desktop\\python\\TTS-systeam\\TTS-Systeam\\web-tts\\node_modules\\@pixi\\math\\src\\Point.ts","C:\\Users\\Owner\\Desktop\\python\\TTS-systeam\\TTS-Systeam\\web-tts\\node_modules\\@pixi\\math\\src\\shapes\\Rectangle.ts","C:\\Users\\Owner\\Desktop\\python\\TTS-systeam\\TTS-Systeam\\web-tts\\node_modules\\@pixi\\math\\src\\shapes\\Circle.ts","C:\\Users\\Owner\\Desktop\\python\\TTS-systeam\\TTS-Systeam\\web-tts\\node_modules\\@pixi\\math\\src\\shapes\\Ellipse.ts","C:\\Users\\Owner\\Desktop\\python\\TTS-systeam\\TTS-Systeam\\web-tts\\node_modules\\@pixi\\math\\src\\shapes\\Polygon.ts","C:\\Users\\Owner\\Desktop\\python\\TTS-systeam\\TTS-Systeam\\web-tts\\node_modules\\@pixi\\math\\src\\shapes\\RoundedRectangle.ts","C:\\Users\\Owner\\Desktop\\python\\TTS-systeam\\TTS-Systeam\\web-tts\\node_modules\\@pixi\\math\\src\\ObservablePoint.ts","C:\\Users\\Owner\\Desktop\\python\\TTS-systeam\\TTS-Systeam\\web-tts\\node_modules\\@pixi\\math\\src\\Matrix.ts","C:\\Users\\Owner\\Desktop\\python\\TTS-systeam\\TTS-Systeam\\web-tts\\node_modules\\@pixi\\math\\src\\groupD8.ts","C:\\Users\\Owner\\Desktop\\python\\TTS-systeam\\TTS-Systeam\\web-tts\\node_modules\\@pixi\\math\\src\\Transform.ts"],"sourcesContent":["/**\n * Two Pi.\n * @static\n * @member {number}\n * @memberof PIXI\n */\nexport const PI_2 = Math.PI * 2;\n\n/**\n * Conversion factor for converting radians to degrees.\n * @static\n * @member {number} RAD_TO_DEG\n * @memberof PIXI\n */\nexport const RAD_TO_DEG = 180 / Math.PI;\n\n/**\n * Conversion factor for converting degrees to radians.\n * @static\n * @member {number}\n * @memberof PIXI\n */\nexport const DEG_TO_RAD = Math.PI / 180;\n\n/**\n * Constants that identify shapes, mainly to prevent `instanceof` calls.\n * @static\n * @memberof PIXI\n * @enum {number}\n * @property {number} POLY Polygon\n * @property {number} RECT Rectangle\n * @property {number} CIRC Circle\n * @property {number} ELIP Ellipse\n * @property {number} RREC Rounded Rectangle\n */\nexport enum SHAPES\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    POLY = 0,\n    RECT = 1,\n    CIRC = 2,\n    ELIP = 3,\n    RREC = 4,\n}\n","import type { IPoint } from './IPoint';\nimport type { IPointData } from './IPointData';\n\nexport interface Point extends GlobalMixins.Point, IPoint {}\n\n/**\n * The Point object represents a location in a two-dimensional coordinate system, where `x` represents\n * the position on the horizontal axis and `y` represents the position on the vertical axis\n * @class\n * @memberof PIXI\n * @implements {IPoint}\n */\nexport class Point implements IPoint\n{\n    /** Position of the point on the x axis */\n    public x = 0;\n    /** Position of the point on the y axis */\n    public y = 0;\n\n    /**\n     * Creates a new `Point`\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n    constructor(x = 0, y = 0)\n    {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     * Creates a clone of this point\n     * @returns A clone of this point\n     */\n    clone(): Point\n    {\n        return new Point(this.x, this.y);\n    }\n\n    /**\n     * Copies `x` and `y` from the given point into this point\n     * @param p - The point to copy from\n     * @returns The point instance itself\n     */\n    copyFrom(p: IPointData): this\n    {\n        this.set(p.x, p.y);\n\n        return this;\n    }\n\n    /**\n     * Copies this point's x and y into the given point (`p`).\n     * @param p - The point to copy to. Can be any of type that is or extends `IPointData`\n     * @returns The point (`p`) with values updated\n     */\n    copyTo<T extends IPoint>(p: T): T\n    {\n        p.set(this.x, this.y);\n\n        return p;\n    }\n\n    /**\n     * Accepts another point (`p`) and returns `true` if the given point is equal to this point\n     * @param p - The point to check\n     * @returns Returns `true` if both `x` and `y` are equal\n     */\n    equals(p: IPointData): boolean\n    {\n        return (p.x === this.x) && (p.y === this.y);\n    }\n\n    /**\n     * Sets the point to a new `x` and `y` position.\n     * If `y` is omitted, both `x` and `y` will be set to `x`.\n     * @param {number} [x=0] - position of the point on the `x` axis\n     * @param {number} [y=x] - position of the point on the `y` axis\n     * @returns The point instance itself\n     */\n    set(x = 0, y = x): this\n    {\n        this.x = x;\n        this.y = y;\n\n        return this;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Point x=${this.x} y=${this.y}]`;\n    }\n    // #endif\n}\n","import { SHAPES } from '../const';\nimport type { Matrix } from '../Matrix';\nimport { Point } from '../Point';\n\nconst tempPoints = [new Point(), new Point(), new Point(), new Point()];\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Rectangle extends GlobalMixins.Rectangle {}\n\n/**\n * Size object, contains width and height\n * @memberof PIXI\n * @typedef {object} ISize\n * @property {number} width - Width component\n * @property {number} height - Height component\n */\n\n/**\n * Rectangle object is an area defined by its position, as indicated by its top-left corner\n * point (x, y) and by its width and its height.\n * @memberof PIXI\n */\nexport class Rectangle\n{\n    /** @default 0 */\n    public x: number;\n\n    /** @default 0 */\n    public y: number;\n    /** @default 0 */\n    public width: number;\n\n    /** @default 0 */\n    public height: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default PIXI.SHAPES.RECT\n     * @see PIXI.SHAPES\n     */\n    public readonly type: SHAPES.RECT;\n\n    /**\n     * @param x - The X coordinate of the upper-left corner of the rectangle\n     * @param y - The Y coordinate of the upper-left corner of the rectangle\n     * @param width - The overall width of the rectangle\n     * @param height - The overall height of the rectangle\n     */\n    constructor(x: string | number = 0, y: string | number = 0, width: string | number = 0, height: string | number = 0)\n    {\n        this.x = Number(x);\n        this.y = Number(y);\n        this.width = Number(width);\n        this.height = Number(height);\n        this.type = SHAPES.RECT;\n    }\n\n    /** Returns the left edge of the rectangle. */\n    get left(): number\n    {\n        return this.x;\n    }\n\n    /** Returns the right edge of the rectangle. */\n    get right(): number\n    {\n        return this.x + this.width;\n    }\n\n    /** Returns the top edge of the rectangle. */\n    get top(): number\n    {\n        return this.y;\n    }\n\n    /** Returns the bottom edge of the rectangle. */\n    get bottom(): number\n    {\n        return this.y + this.height;\n    }\n\n    /** A constant empty rectangle. */\n    static get EMPTY(): Rectangle\n    {\n        return new Rectangle(0, 0, 0, 0);\n    }\n\n    /**\n     * Creates a clone of this Rectangle\n     * @returns a copy of the rectangle\n     */\n    clone(): Rectangle\n    {\n        return new Rectangle(this.x, this.y, this.width, this.height);\n    }\n\n    /**\n     * Copies another rectangle to this one.\n     * @param rectangle - The rectangle to copy from.\n     * @returns Returns itself.\n     */\n    copyFrom(rectangle: Rectangle): Rectangle\n    {\n        this.x = rectangle.x;\n        this.y = rectangle.y;\n        this.width = rectangle.width;\n        this.height = rectangle.height;\n\n        return this;\n    }\n\n    /**\n     * Copies this rectangle to another one.\n     * @param rectangle - The rectangle to copy to.\n     * @returns Returns given parameter.\n     */\n    copyTo(rectangle: Rectangle): Rectangle\n    {\n        rectangle.x = this.x;\n        rectangle.y = this.y;\n        rectangle.width = this.width;\n        rectangle.height = this.height;\n\n        return rectangle;\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rectangle\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @returns Whether the x/y coordinates are within this Rectangle\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n\n        if (x >= this.x && x < this.x + this.width)\n        {\n            if (y >= this.y && y < this.y + this.height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Determines whether the `other` Rectangle transformed by `transform` intersects with `this` Rectangle object.\n     * Returns true only if the area of the intersection is >0, this means that Rectangles\n     * sharing a side are not overlapping. Another side effect is that an arealess rectangle\n     * (width or height equal to zero) can't intersect any other rectangle.\n     * @param {Rectangle} other - The Rectangle to intersect with `this`.\n     * @param {Matrix} transform - The transformation matrix of `other`.\n     * @returns {boolean} A value of `true` if the transformed `other` Rectangle intersects with `this`; otherwise `false`.\n     */\n    intersects(other: Rectangle, transform?: Matrix): boolean\n    {\n        if (!transform)\n        {\n            const x0 = this.x < other.x ? other.x : this.x;\n            const x1 = this.right > other.right ? other.right : this.right;\n\n            if (x1 <= x0)\n            {\n                return false;\n            }\n\n            const y0 = this.y < other.y ? other.y : this.y;\n            const y1 = this.bottom > other.bottom ? other.bottom : this.bottom;\n\n            return y1 > y0;\n        }\n\n        const x0 = this.left;\n        const x1 = this.right;\n        const y0 = this.top;\n        const y1 = this.bottom;\n\n        if (x1 <= x0 || y1 <= y0)\n        {\n            return false;\n        }\n\n        const lt = tempPoints[0].set(other.left, other.top);\n        const lb = tempPoints[1].set(other.left, other.bottom);\n        const rt = tempPoints[2].set(other.right, other.top);\n        const rb = tempPoints[3].set(other.right, other.bottom);\n\n        if (rt.x <= lt.x || lb.y <= lt.y)\n        {\n            return false;\n        }\n\n        const s = Math.sign((transform.a * transform.d) - (transform.b * transform.c));\n\n        if (s === 0)\n        {\n            return false;\n        }\n\n        transform.apply(lt, lt);\n        transform.apply(lb, lb);\n        transform.apply(rt, rt);\n        transform.apply(rb, rb);\n\n        if (Math.max(lt.x, lb.x, rt.x, rb.x) <= x0\n            || Math.min(lt.x, lb.x, rt.x, rb.x) >= x1\n            || Math.max(lt.y, lb.y, rt.y, rb.y) <= y0\n            || Math.min(lt.y, lb.y, rt.y, rb.y) >= y1)\n        {\n            return false;\n        }\n\n        const nx = s * (lb.y - lt.y);\n        const ny = s * (lt.x - lb.x);\n        const n00 = (nx * x0) + (ny * y0);\n        const n10 = (nx * x1) + (ny * y0);\n        const n01 = (nx * x0) + (ny * y1);\n        const n11 = (nx * x1) + (ny * y1);\n\n        if (Math.max(n00, n10, n01, n11) <= (nx * lt.x) + (ny * lt.y)\n            || Math.min(n00, n10, n01, n11) >= (nx * rb.x) + (ny * rb.y))\n        {\n            return false;\n        }\n\n        const mx = s * (lt.y - rt.y);\n        const my = s * (rt.x - lt.x);\n        const m00 = (mx * x0) + (my * y0);\n        const m10 = (mx * x1) + (my * y0);\n        const m01 = (mx * x0) + (my * y1);\n        const m11 = (mx * x1) + (my * y1);\n\n        if (Math.max(m00, m10, m01, m11) <= (mx * lt.x) + (my * lt.y)\n            || Math.min(m00, m10, m01, m11) >= (mx * rb.x) + (my * rb.y))\n        {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Pads the rectangle making it grow in all directions.\n     * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n     * @param paddingX - The horizontal padding amount.\n     * @param paddingY - The vertical padding amount.\n     * @returns Returns itself.\n     */\n    pad(paddingX = 0, paddingY = paddingX): this\n    {\n        this.x -= paddingX;\n        this.y -= paddingY;\n\n        this.width += paddingX * 2;\n        this.height += paddingY * 2;\n\n        return this;\n    }\n\n    /**\n     * Fits this rectangle around the passed one.\n     * @param rectangle - The rectangle to fit.\n     * @returns Returns itself.\n     */\n    fit(rectangle: Rectangle): this\n    {\n        const x1 = Math.max(this.x, rectangle.x);\n        const x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);\n        const y1 = Math.max(this.y, rectangle.y);\n        const y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);\n\n        this.x = x1;\n        this.width = Math.max(x2 - x1, 0);\n        this.y = y1;\n        this.height = Math.max(y2 - y1, 0);\n\n        return this;\n    }\n\n    /**\n     * Enlarges rectangle that way its corners lie on grid\n     * @param resolution - resolution\n     * @param eps - precision\n     * @returns Returns itself.\n     */\n    ceil(resolution = 1, eps = 0.001): this\n    {\n        const x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;\n        const y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;\n\n        this.x = Math.floor((this.x + eps) * resolution) / resolution;\n        this.y = Math.floor((this.y + eps) * resolution) / resolution;\n\n        this.width = x2 - this.x;\n        this.height = y2 - this.y;\n\n        return this;\n    }\n\n    /**\n     * Enlarges this rectangle to include the passed rectangle.\n     * @param rectangle - The rectangle to include.\n     * @returns Returns itself.\n     */\n    enlarge(rectangle: Rectangle): this\n    {\n        const x1 = Math.min(this.x, rectangle.x);\n        const x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);\n        const y1 = Math.min(this.y, rectangle.y);\n        const y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);\n\n        this.x = x1;\n        this.width = x2 - x1;\n        this.y = y1;\n        this.height = y2 - y1;\n\n        return this;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Rectangle x=${this.x} y=${this.y} width=${this.width} height=${this.height}]`;\n    }\n    // #endif\n}\n","import { SHAPES } from './../const';\nimport { Rectangle } from './Rectangle';\n\n/**\n * The Circle object is used to help draw graphics and can also be used to specify a hit area for displayObjects.\n * @memberof PIXI\n */\nexport class Circle\n{\n    /** @default 0 */\n    public x: number;\n\n    /** @default 0 */\n    public y: number;\n\n    /** @default 0 */\n    public radius: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default PIXI.SHAPES.CIRC\n     * @see PIXI.SHAPES\n     */\n    public readonly type: SHAPES.CIRC;\n\n    /**\n     * @param x - The X coordinate of the center of this circle\n     * @param y - The Y coordinate of the center of this circle\n     * @param radius - The radius of the circle\n     */\n    constructor(x = 0, y = 0, radius = 0)\n    {\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n\n        this.type = SHAPES.CIRC;\n    }\n\n    /**\n     * Creates a clone of this Circle instance\n     * @returns A copy of the Circle\n     */\n    clone(): Circle\n    {\n        return new Circle(this.x, this.y, this.radius);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this circle\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @returns Whether the x/y coordinates are within this Circle\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.radius <= 0)\n        {\n            return false;\n        }\n\n        const r2 = this.radius * this.radius;\n        let dx = (this.x - x);\n        let dy = (this.y - y);\n\n        dx *= dx;\n        dy *= dy;\n\n        return (dx + dy <= r2);\n    }\n\n    /**\n     * Returns the framing rectangle of the circle as a Rectangle object\n     * @returns The framing rectangle\n     */\n    getBounds(): Rectangle\n    {\n        return new Rectangle(this.x - this.radius, this.y - this.radius, this.radius * 2, this.radius * 2);\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Circle x=${this.x} y=${this.y} radius=${this.radius}]`;\n    }\n    // #endif\n}\n","import { Rectangle } from './Rectangle';\nimport { SHAPES } from '../const';\n\n/**\n * The Ellipse object is used to help draw graphics and can also be used to specify a hit area for displayObjects.\n * @memberof PIXI\n */\nexport class Ellipse\n{\n    /** @default 0 */\n    public x: number;\n\n    /** @default 0 */\n    public y: number;\n\n    /** @default 0 */\n    public width: number;\n\n    /** @default 0 */\n    public height: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default PIXI.SHAPES.ELIP\n     * @see PIXI.SHAPES\n     */\n    public readonly type: SHAPES.ELIP;\n\n    /**\n     * @param x - The X coordinate of the center of this ellipse\n     * @param y - The Y coordinate of the center of this ellipse\n     * @param halfWidth - The half width of this ellipse\n     * @param halfHeight - The half height of this ellipse\n     */\n    constructor(x = 0, y = 0, halfWidth = 0, halfHeight = 0)\n    {\n        this.x = x;\n        this.y = y;\n        this.width = halfWidth;\n        this.height = halfHeight;\n\n        this.type = SHAPES.ELIP;\n    }\n\n    /**\n     * Creates a clone of this Ellipse instance\n     * @returns {PIXI.Ellipse} A copy of the ellipse\n     */\n    clone(): Ellipse\n    {\n        return new Ellipse(this.x, this.y, this.width, this.height);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this ellipse\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @returns Whether the x/y coords are within this ellipse\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n\n        // normalize the coords to an ellipse with center 0,0\n        let normx = ((x - this.x) / this.width);\n        let normy = ((y - this.y) / this.height);\n\n        normx *= normx;\n        normy *= normy;\n\n        return (normx + normy <= 1);\n    }\n\n    /**\n     * Returns the framing rectangle of the ellipse as a Rectangle object\n     * @returns The framing rectangle\n     */\n    getBounds(): Rectangle\n    {\n        return new Rectangle(this.x - this.width, this.y - this.height, this.width, this.height);\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Ellipse x=${this.x} y=${this.y} width=${this.width} height=${this.height}]`;\n    }\n    // #endif\n}\n","import { SHAPES } from '../const';\nimport type { IPointData } from '../IPointData';\n\n/**\n * A class to define a shape via user defined coordinates.\n * @memberof PIXI\n */\nexport class Polygon\n{\n    /** An array of the points of this polygon. */\n    public points: number[];\n\n    /** `false` after moveTo, `true` after `closePath`. In all other cases it is `true`. */\n    public closeStroke: boolean;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default PIXI.SHAPES.POLY\n     * @see PIXI.SHAPES\n     */\n    public readonly type: SHAPES.POLY;\n\n    constructor(points: IPointData[] | number[]);\n    constructor(...points: IPointData[] | number[]);\n\n    /**\n     * @param {PIXI.IPointData[]|number[]} points - This can be an array of Points\n     *  that form the polygon, a flat array of numbers that will be interpreted as [x,y, x,y, ...], or\n     *  the arguments passed can be all the points of the polygon e.g.\n     *  `new PIXI.Polygon(new PIXI.Point(), new PIXI.Point(), ...)`, or the arguments passed can be flat\n     *  x,y values e.g. `new Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are Numbers.\n     */\n    constructor(...points: any[])\n    {\n        let flat: IPointData[] | number[] = Array.isArray(points[0]) ? points[0] : points;\n\n        // if this is an array of points, convert it to a flat array of numbers\n        if (typeof flat[0] !== 'number')\n        {\n            const p: number[] = [];\n\n            for (let i = 0, il = flat.length; i < il; i++)\n            {\n                p.push((flat[i] as IPointData).x, (flat[i] as IPointData).y);\n            }\n\n            flat = p;\n        }\n\n        this.points = flat as number[];\n        this.type = SHAPES.POLY;\n        this.closeStroke = true;\n    }\n\n    /**\n     * Creates a clone of this polygon.\n     * @returns - A copy of the polygon.\n     */\n    clone(): Polygon\n    {\n        const points = this.points.slice();\n        const polygon = new Polygon(points);\n\n        polygon.closeStroke = this.closeStroke;\n\n        return polygon;\n    }\n\n    /**\n     * Checks whether the x and y coordinates passed to this function are contained within this polygon.\n     * @param x - The X coordinate of the point to test.\n     * @param y - The Y coordinate of the point to test.\n     * @returns - Whether the x/y coordinates are within this polygon.\n     */\n    contains(x: number, y: number): boolean\n    {\n        let inside = false;\n\n        // use some raycasting to test hits\n        // https://github.com/substack/point-in-polygon/blob/master/index.js\n        const length = this.points.length / 2;\n\n        for (let i = 0, j = length - 1; i < length; j = i++)\n        {\n            const xi = this.points[i * 2];\n            const yi = this.points[(i * 2) + 1];\n            const xj = this.points[j * 2];\n            const yj = this.points[(j * 2) + 1];\n            const intersect = ((yi > y) !== (yj > y)) && (x < ((xj - xi) * ((y - yi) / (yj - yi))) + xi);\n\n            if (intersect)\n            {\n                inside = !inside;\n            }\n        }\n\n        return inside;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Polygon`\n            + `closeStroke=${this.closeStroke}`\n            + `points=${this.points.reduce((pointsDesc, currentPoint) => `${pointsDesc}, ${currentPoint}`, '')}]`;\n    }\n    // #endif\n}\n","import { SHAPES } from '../const';\n\n/**\n * The Rounded Rectangle object is an area that has nice rounded corners, as indicated by its\n * top-left corner point (x, y) and by its width and its height and its radius.\n * @memberof PIXI\n */\nexport class RoundedRectangle\n{\n    /** @default 0 */\n    public x: number;\n\n    /** @default 0 */\n    public y: number;\n\n    /** @default 0 */\n    public width: number;\n\n    /** @default 0 */\n    public height: number;\n\n    /** @default 20 */\n    public radius: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default PIXI.SHAPES.RREC\n     * @see PIXI.SHAPES\n     */\n    public readonly type: SHAPES.RREC;\n\n    /**\n     * @param x - The X coordinate of the upper-left corner of the rounded rectangle\n     * @param y - The Y coordinate of the upper-left corner of the rounded rectangle\n     * @param width - The overall width of this rounded rectangle\n     * @param height - The overall height of this rounded rectangle\n     * @param radius - Controls the radius of the rounded corners\n     */\n    constructor(x = 0, y = 0, width = 0, height = 0, radius = 20)\n    {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        this.radius = radius;\n        this.type = SHAPES.RREC;\n    }\n\n    /**\n     * Creates a clone of this Rounded Rectangle.\n     * @returns - A copy of the rounded rectangle.\n     */\n    clone(): RoundedRectangle\n    {\n        return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rounded Rectangle\n     * @param x - The X coordinate of the point to test.\n     * @param y - The Y coordinate of the point to test.\n     * @returns - Whether the x/y coordinates are within this Rounded Rectangle.\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n        if (x >= this.x && x <= this.x + this.width)\n        {\n            if (y >= this.y && y <= this.y + this.height)\n            {\n                const radius = Math.max(0, Math.min(this.radius, Math.min(this.width, this.height) / 2));\n\n                if ((y >= this.y + radius && y <= this.y + this.height - radius)\n                || (x >= this.x + radius && x <= this.x + this.width - radius))\n                {\n                    return true;\n                }\n                let dx = x - (this.x + radius);\n                let dy = y - (this.y + radius);\n                const radius2 = radius * radius;\n\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dx = x - (this.x + this.width - radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dy = y - (this.y + this.height - radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dx = x - (this.x + radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:RoundedRectangle x=${this.x} y=${this.y}`\n            + `width=${this.width} height=${this.height} radius=${this.radius}]`;\n    }\n    // #endif\n}\n","import type { IPointData } from './IPointData';\nimport type { IPoint } from './IPoint';\n\nexport interface ObservablePoint extends GlobalMixins.Point, IPoint {}\n\n/**\n * The ObservablePoint object represents a location in a two-dimensional coordinate system, where `x` represents\n * the position on the horizontal axis and `y` represents the position on the vertical axis.\n *\n * An `ObservablePoint` is a point that triggers a callback when the point's position is changed.\n * @memberof PIXI\n */\nexport class ObservablePoint<T = any> implements IPoint\n{\n    /** The callback function triggered when `x` and/or `y` are changed */\n    public cb: (this: T) => any;\n\n    /** The owner of the callback */\n    public scope: any;\n\n    _x: number;\n    _y: number;\n\n    /**\n     * Creates a new `ObservablePoint`\n     * @param cb - callback function triggered when `x` and/or `y` are changed\n     * @param scope - owner of callback\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n    constructor(cb: (this: T) => any, scope: T, x = 0, y = 0)\n    {\n        this._x = x;\n        this._y = y;\n\n        this.cb = cb;\n        this.scope = scope;\n    }\n\n    /**\n     * Creates a clone of this point.\n     * The callback and scope params can be overridden otherwise they will default\n     * to the clone object's values.\n     * @override\n     * @param cb - The callback function triggered when `x` and/or `y` are changed\n     * @param scope - The owner of the callback\n     * @returns a copy of this observable point\n     */\n    clone(cb = this.cb, scope = this.scope): ObservablePoint\n    {\n        return new ObservablePoint(cb, scope, this._x, this._y);\n    }\n\n    /**\n     * Sets the point to a new `x` and `y` position.\n     * If `y` is omitted, both `x` and `y` will be set to `x`.\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=x] - position of the point on the y axis\n     * @returns The observable point instance itself\n     */\n    set(x = 0, y = x): this\n    {\n        if (this._x !== x || this._y !== y)\n        {\n            this._x = x;\n            this._y = y;\n            this.cb.call(this.scope);\n        }\n\n        return this;\n    }\n\n    /**\n     * Copies x and y from the given point (`p`)\n     * @param p - The point to copy from. Can be any of type that is or extends `IPointData`\n     * @returns The observable point instance itself\n     */\n    copyFrom(p: IPointData): this\n    {\n        if (this._x !== p.x || this._y !== p.y)\n        {\n            this._x = p.x;\n            this._y = p.y;\n            this.cb.call(this.scope);\n        }\n\n        return this;\n    }\n\n    /**\n     * Copies this point's x and y into that of the given point (`p`)\n     * @param p - The point to copy to. Can be any of type that is or extends `IPointData`\n     * @returns The point (`p`) with values updated\n     */\n    copyTo<T extends IPoint>(p: T): T\n    {\n        p.set(this._x, this._y);\n\n        return p;\n    }\n\n    /**\n     * Accepts another point (`p`) and returns `true` if the given point is equal to this point\n     * @param p - The point to check\n     * @returns Returns `true` if both `x` and `y` are equal\n     */\n    equals(p: IPointData): boolean\n    {\n        return (p.x === this._x) && (p.y === this._y);\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:ObservablePoint x=${0} y=${0} scope=${this.scope}]`;\n    }\n    // #endif\n\n    /** Position of the observable point on the x axis. */\n    get x(): number\n    {\n        return this._x;\n    }\n\n    set x(value: number)\n    {\n        if (this._x !== value)\n        {\n            this._x = value;\n            this.cb.call(this.scope);\n        }\n    }\n\n    /** Position of the observable point on the y axis. */\n    get y(): number\n    {\n        return this._y;\n    }\n\n    set y(value: number)\n    {\n        if (this._y !== value)\n        {\n            this._y = value;\n            this.cb.call(this.scope);\n        }\n    }\n}\n","import { Point } from './Point';\nimport { PI_2 } from './const';\n\nimport type { Transform } from './Transform';\nimport type { IPointData } from './IPointData';\n\n/**\n * The PixiJS Matrix as a class makes it a lot faster.\n *\n * Here is a representation of it:\n * ```js\n * | a | c | tx|\n * | b | d | ty|\n * | 0 | 0 | 1 |\n * ```\n * @memberof PIXI\n */\nexport class Matrix\n{\n    /** @default 1 */\n    public a: number;\n\n    /** @default 0 */\n    public b: number;\n\n    /** @default 0 */\n    public c: number;\n\n    /** @default 1 */\n    public d: number;\n\n    /** @default 0 */\n    public tx: number;\n\n    /** @default 0 */\n    public ty: number;\n\n    public array: Float32Array | null = null;\n\n    /**\n     * @param a - x scale\n     * @param b - y skew\n     * @param c - x skew\n     * @param d - y scale\n     * @param tx - x translation\n     * @param ty - y translation\n     */\n    constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0)\n    {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.tx = tx;\n        this.ty = ty;\n    }\n\n    /**\n     * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:\n     *\n     * a = array[0]\n     * b = array[1]\n     * c = array[3]\n     * d = array[4]\n     * tx = array[2]\n     * ty = array[5]\n     * @param array - The array that the matrix will be populated from.\n     */\n    fromArray(array: number[]): void\n    {\n        this.a = array[0];\n        this.b = array[1];\n        this.c = array[3];\n        this.d = array[4];\n        this.tx = array[2];\n        this.ty = array[5];\n    }\n\n    /**\n     * Sets the matrix properties.\n     * @param a - Matrix component\n     * @param b - Matrix component\n     * @param c - Matrix component\n     * @param d - Matrix component\n     * @param tx - Matrix component\n     * @param ty - Matrix component\n     * @returns This matrix. Good for chaining method calls.\n     */\n    set(a: number, b: number, c: number, d: number, tx: number, ty: number): this\n    {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.tx = tx;\n        this.ty = ty;\n\n        return this;\n    }\n\n    /**\n     * Creates an array from the current Matrix object.\n     * @param transpose - Whether we need to transpose the matrix or not\n     * @param [out=new Float32Array(9)] - If provided the array will be assigned to out\n     * @returns The newly created array which contains the matrix\n     */\n    toArray(transpose: boolean, out?: Float32Array): Float32Array\n    {\n        if (!this.array)\n        {\n            this.array = new Float32Array(9);\n        }\n\n        const array = out || this.array;\n\n        if (transpose)\n        {\n            array[0] = this.a;\n            array[1] = this.b;\n            array[2] = 0;\n            array[3] = this.c;\n            array[4] = this.d;\n            array[5] = 0;\n            array[6] = this.tx;\n            array[7] = this.ty;\n            array[8] = 1;\n        }\n        else\n        {\n            array[0] = this.a;\n            array[1] = this.c;\n            array[2] = this.tx;\n            array[3] = this.b;\n            array[4] = this.d;\n            array[5] = this.ty;\n            array[6] = 0;\n            array[7] = 0;\n            array[8] = 1;\n        }\n\n        return array;\n    }\n\n    /**\n     * Get a new position with the current transformation applied.\n     * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)\n     * @param pos - The origin\n     * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n     * @returns {PIXI.Point} The new point, transformed through this matrix\n     */\n    apply<P extends IPointData = Point>(pos: IPointData, newPos?: P): P\n    {\n        newPos = (newPos || new Point()) as P;\n\n        const x = pos.x;\n        const y = pos.y;\n\n        newPos.x = (this.a * x) + (this.c * y) + this.tx;\n        newPos.y = (this.b * x) + (this.d * y) + this.ty;\n\n        return newPos;\n    }\n\n    /**\n     * Get a new position with the inverse of the current transformation applied.\n     * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)\n     * @param pos - The origin\n     * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n     * @returns {PIXI.Point} The new point, inverse-transformed through this matrix\n     */\n    applyInverse<P extends IPointData = Point>(pos: IPointData, newPos?: P): P\n    {\n        newPos = (newPos || new Point()) as P;\n\n        const id = 1 / ((this.a * this.d) + (this.c * -this.b));\n\n        const x = pos.x;\n        const y = pos.y;\n\n        newPos.x = (this.d * id * x) + (-this.c * id * y) + (((this.ty * this.c) - (this.tx * this.d)) * id);\n        newPos.y = (this.a * id * y) + (-this.b * id * x) + (((-this.ty * this.a) + (this.tx * this.b)) * id);\n\n        return newPos;\n    }\n\n    /**\n     * Translates the matrix on the x and y.\n     * @param x - How much to translate x by\n     * @param y - How much to translate y by\n     * @returns This matrix. Good for chaining method calls.\n     */\n    translate(x: number, y: number): this\n    {\n        this.tx += x;\n        this.ty += y;\n\n        return this;\n    }\n\n    /**\n     * Applies a scale transformation to the matrix.\n     * @param x - The amount to scale horizontally\n     * @param y - The amount to scale vertically\n     * @returns This matrix. Good for chaining method calls.\n     */\n    scale(x: number, y: number): this\n    {\n        this.a *= x;\n        this.d *= y;\n        this.c *= x;\n        this.b *= y;\n        this.tx *= x;\n        this.ty *= y;\n\n        return this;\n    }\n\n    /**\n     * Applies a rotation transformation to the matrix.\n     * @param angle - The angle in radians.\n     * @returns This matrix. Good for chaining method calls.\n     */\n    rotate(angle: number): this\n    {\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        const a1 = this.a;\n        const c1 = this.c;\n        const tx1 = this.tx;\n\n        this.a = (a1 * cos) - (this.b * sin);\n        this.b = (a1 * sin) + (this.b * cos);\n        this.c = (c1 * cos) - (this.d * sin);\n        this.d = (c1 * sin) + (this.d * cos);\n        this.tx = (tx1 * cos) - (this.ty * sin);\n        this.ty = (tx1 * sin) + (this.ty * cos);\n\n        return this;\n    }\n\n    /**\n     * Appends the given Matrix to this Matrix.\n     * @param matrix - The matrix to append.\n     * @returns This matrix. Good for chaining method calls.\n     */\n    append(matrix: Matrix): this\n    {\n        const a1 = this.a;\n        const b1 = this.b;\n        const c1 = this.c;\n        const d1 = this.d;\n\n        this.a = (matrix.a * a1) + (matrix.b * c1);\n        this.b = (matrix.a * b1) + (matrix.b * d1);\n        this.c = (matrix.c * a1) + (matrix.d * c1);\n        this.d = (matrix.c * b1) + (matrix.d * d1);\n\n        this.tx = (matrix.tx * a1) + (matrix.ty * c1) + this.tx;\n        this.ty = (matrix.tx * b1) + (matrix.ty * d1) + this.ty;\n\n        return this;\n    }\n\n    /**\n     * Sets the matrix based on all the available properties\n     * @param x - Position on the x axis\n     * @param y - Position on the y axis\n     * @param pivotX - Pivot on the x axis\n     * @param pivotY - Pivot on the y axis\n     * @param scaleX - Scale on the x axis\n     * @param scaleY - Scale on the y axis\n     * @param rotation - Rotation in radians\n     * @param skewX - Skew on the x axis\n     * @param skewY - Skew on the y axis\n     * @returns This matrix. Good for chaining method calls.\n     */\n    setTransform(x: number, y: number, pivotX: number, pivotY: number, scaleX: number,\n        scaleY: number, rotation: number, skewX: number, skewY: number): this\n    {\n        this.a = Math.cos(rotation + skewY) * scaleX;\n        this.b = Math.sin(rotation + skewY) * scaleX;\n        this.c = -Math.sin(rotation - skewX) * scaleY;\n        this.d = Math.cos(rotation - skewX) * scaleY;\n\n        this.tx = x - ((pivotX * this.a) + (pivotY * this.c));\n        this.ty = y - ((pivotX * this.b) + (pivotY * this.d));\n\n        return this;\n    }\n\n    /**\n     * Prepends the given Matrix to this Matrix.\n     * @param matrix - The matrix to prepend\n     * @returns This matrix. Good for chaining method calls.\n     */\n    prepend(matrix: Matrix): this\n    {\n        const tx1 = this.tx;\n\n        if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1)\n        {\n            const a1 = this.a;\n            const c1 = this.c;\n\n            this.a = (a1 * matrix.a) + (this.b * matrix.c);\n            this.b = (a1 * matrix.b) + (this.b * matrix.d);\n            this.c = (c1 * matrix.a) + (this.d * matrix.c);\n            this.d = (c1 * matrix.b) + (this.d * matrix.d);\n        }\n\n        this.tx = (tx1 * matrix.a) + (this.ty * matrix.c) + matrix.tx;\n        this.ty = (tx1 * matrix.b) + (this.ty * matrix.d) + matrix.ty;\n\n        return this;\n    }\n\n    /**\n     * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.\n     * @param transform - The transform to apply the properties to.\n     * @returns The transform with the newly applied properties\n     */\n    decompose(transform: Transform): Transform\n    {\n        // sort out rotation / skew..\n        const a = this.a;\n        const b = this.b;\n        const c = this.c;\n        const d = this.d;\n        const pivot = transform.pivot;\n\n        const skewX = -Math.atan2(-c, d);\n        const skewY = Math.atan2(b, a);\n\n        const delta = Math.abs(skewX + skewY);\n\n        if (delta < 0.00001 || Math.abs(PI_2 - delta) < 0.00001)\n        {\n            transform.rotation = skewY;\n            transform.skew.x = transform.skew.y = 0;\n        }\n        else\n        {\n            transform.rotation = 0;\n            transform.skew.x = skewX;\n            transform.skew.y = skewY;\n        }\n\n        // next set scale\n        transform.scale.x = Math.sqrt((a * a) + (b * b));\n        transform.scale.y = Math.sqrt((c * c) + (d * d));\n\n        // next set position\n        transform.position.x = this.tx + ((pivot.x * a) + (pivot.y * c));\n        transform.position.y = this.ty + ((pivot.x * b) + (pivot.y * d));\n\n        return transform;\n    }\n\n    /**\n     * Inverts this matrix\n     * @returns This matrix. Good for chaining method calls.\n     */\n    invert(): this\n    {\n        const a1 = this.a;\n        const b1 = this.b;\n        const c1 = this.c;\n        const d1 = this.d;\n        const tx1 = this.tx;\n        const n = (a1 * d1) - (b1 * c1);\n\n        this.a = d1 / n;\n        this.b = -b1 / n;\n        this.c = -c1 / n;\n        this.d = a1 / n;\n        this.tx = ((c1 * this.ty) - (d1 * tx1)) / n;\n        this.ty = -((a1 * this.ty) - (b1 * tx1)) / n;\n\n        return this;\n    }\n\n    /**\n     * Resets this Matrix to an identity (default) matrix.\n     * @returns This matrix. Good for chaining method calls.\n     */\n    identity(): this\n    {\n        this.a = 1;\n        this.b = 0;\n        this.c = 0;\n        this.d = 1;\n        this.tx = 0;\n        this.ty = 0;\n\n        return this;\n    }\n\n    /**\n     * Creates a new Matrix object with the same values as this one.\n     * @returns A copy of this matrix. Good for chaining method calls.\n     */\n    clone(): Matrix\n    {\n        const matrix = new Matrix();\n\n        matrix.a = this.a;\n        matrix.b = this.b;\n        matrix.c = this.c;\n        matrix.d = this.d;\n        matrix.tx = this.tx;\n        matrix.ty = this.ty;\n\n        return matrix;\n    }\n\n    /**\n     * Changes the values of the given matrix to be the same as the ones in this matrix\n     * @param matrix - The matrix to copy to.\n     * @returns The matrix given in parameter with its values updated.\n     */\n    copyTo(matrix: Matrix): Matrix\n    {\n        matrix.a = this.a;\n        matrix.b = this.b;\n        matrix.c = this.c;\n        matrix.d = this.d;\n        matrix.tx = this.tx;\n        matrix.ty = this.ty;\n\n        return matrix;\n    }\n\n    /**\n     * Changes the values of the matrix to be the same as the ones in given matrix\n     * @param {PIXI.Matrix} matrix - The matrix to copy from.\n     * @returns {PIXI.Matrix} this\n     */\n    copyFrom(matrix: Matrix): this\n    {\n        this.a = matrix.a;\n        this.b = matrix.b;\n        this.c = matrix.c;\n        this.d = matrix.d;\n        this.tx = matrix.tx;\n        this.ty = matrix.ty;\n\n        return this;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Matrix a=${this.a} b=${this.b} c=${this.c} d=${this.d} tx=${this.tx} ty=${this.ty}]`;\n    }\n    // #endif\n\n    /**\n     * A default (identity) matrix\n     * @readonly\n     */\n    static get IDENTITY(): Matrix\n    {\n        return new Matrix();\n    }\n\n    /**\n     * A temp matrix\n     * @readonly\n     */\n    static get TEMP_MATRIX(): Matrix\n    {\n        return new Matrix();\n    }\n}\n","// Your friendly neighbour https://en.wikipedia.org/wiki/Dihedral_group\n//\n// This file implements the dihedral group of order 16, also called\n// of degree 8. That's why its called groupD8.\n\nimport { Matrix } from './Matrix';\n\n/*\n * Transform matrix for operation n is:\n * | ux | vx |\n * | uy | vy |\n */\n\nconst ux = [1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1, 0, 1];\nconst uy = [0, 1, 1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1];\nconst vx = [0, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1];\nconst vy = [1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, 1, 1, 1, 0, -1];\n\n/**\n * [Cayley Table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n * for the composition of each rotation in the dihederal group D8.\n * @type {number[][]}\n * @private\n */\nconst rotationCayley: number[][] = [];\n\n/**\n * Matrices for each `GD8Symmetry` rotation.\n * @type {PIXI.Matrix[]}\n * @private\n */\nconst rotationMatrices: Matrix[] = [];\n\n/*\n * Alias for {@code Math.sign}.\n */\nconst signum = Math.sign;\n\n/*\n * Initializes `rotationCayley` and `rotationMatrices`. It is called\n * only once below.\n */\nfunction init(): void\n{\n    for (let i = 0; i < 16; i++)\n    {\n        const row: number[] = [];\n\n        rotationCayley.push(row);\n\n        for (let j = 0; j < 16; j++)\n        {\n            /* Multiplies rotation matrices i and j. */\n            const _ux = signum((ux[i] * ux[j]) + (vx[i] * uy[j]));\n            const _uy = signum((uy[i] * ux[j]) + (vy[i] * uy[j]));\n            const _vx = signum((ux[i] * vx[j]) + (vx[i] * vy[j]));\n            const _vy = signum((uy[i] * vx[j]) + (vy[i] * vy[j]));\n\n            /* Finds rotation matrix matching the product and pushes it. */\n            for (let k = 0; k < 16; k++)\n            {\n                if (ux[k] === _ux && uy[k] === _uy\n                      && vx[k] === _vx && vy[k] === _vy)\n                {\n                    row.push(k);\n                    break;\n                }\n            }\n        }\n    }\n\n    for (let i = 0; i < 16; i++)\n    {\n        const mat = new Matrix();\n\n        mat.set(ux[i], uy[i], vx[i], vy[i], 0, 0);\n        rotationMatrices.push(mat);\n    }\n}\n\ninit();\n\ntype GD8Symmetry = number;\n/**\n * @memberof PIXI\n * @typedef {number} GD8Symmetry\n * @see PIXI.groupD8\n */\n\n/**\n * Implements the dihedral group D8, which is similar to\n * [group D4]{@link http://mathworld.wolfram.com/DihedralGroupD4.html};\n * D8 is the same but with diagonals, and it is used for texture\n * rotations.\n *\n * The directions the U- and V- axes after rotation\n * of an angle of `a: GD8Constant` are the vectors `(uX(a), uY(a))`\n * and `(vX(a), vY(a))`. These aren't necessarily unit vectors.\n *\n * **Origin:**<br>\n *  This is the small part of gameofbombs.com portal system. It works.\n * @see PIXI.groupD8.E\n * @see PIXI.groupD8.SE\n * @see PIXI.groupD8.S\n * @see PIXI.groupD8.SW\n * @see PIXI.groupD8.W\n * @see PIXI.groupD8.NW\n * @see PIXI.groupD8.N\n * @see PIXI.groupD8.NE\n * @author Ivan @ivanpopelyshev\n * @namespace PIXI.groupD8\n * @memberof PIXI\n */\nexport const groupD8 = {\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 0°       | East      |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    E: 0,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 45°↻     | Southeast |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    SE: 1,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 90°↻     | South     |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    S: 2,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 135°↻    | Southwest |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    SW: 3,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 180°     | West      |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    W: 4,\n\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -135°/225°↻ | Northwest    |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    NW: 5,\n\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -90°/270°↻  | North        |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    N: 6,\n\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -45°/315°↻  | Northeast    |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    NE: 7,\n\n    /**\n     * Reflection about Y-axis.\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    MIRROR_VERTICAL: 8,\n\n    /**\n     * Reflection about the main diagonal.\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    MAIN_DIAGONAL: 10,\n\n    /**\n     * Reflection about X-axis.\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    MIRROR_HORIZONTAL: 12,\n\n    /**\n     * Reflection about reverse diagonal.\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    REVERSE_DIAGONAL: 14,\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @returns {PIXI.GD8Symmetry} The X-component of the U-axis\n     *    after rotating the axes.\n     */\n    uX: (ind: GD8Symmetry): GD8Symmetry => ux[ind],\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @returns {PIXI.GD8Symmetry} The Y-component of the U-axis\n     *    after rotating the axes.\n     */\n    uY: (ind: GD8Symmetry): GD8Symmetry => uy[ind],\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @returns {PIXI.GD8Symmetry} The X-component of the V-axis\n     *    after rotating the axes.\n     */\n    vX: (ind: GD8Symmetry): GD8Symmetry => vx[ind],\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @returns {PIXI.GD8Symmetry} The Y-component of the V-axis\n     *    after rotating the axes.\n     */\n    vY: (ind: GD8Symmetry): GD8Symmetry => vy[ind],\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotation - symmetry whose opposite\n     *   is needed. Only rotations have opposite symmetries while\n     *   reflections don't.\n     * @returns {PIXI.GD8Symmetry} The opposite symmetry of `rotation`\n     */\n    inv: (rotation: GD8Symmetry): GD8Symmetry =>\n    {\n        if (rotation & 8)// true only if between 8 & 15 (reflections)\n        {\n            return rotation & 15;// or rotation % 16\n        }\n\n        return (-rotation) & 7;// or (8 - rotation) % 8\n    },\n\n    /**\n     * Composes the two D8 operations.\n     *\n     * Taking `^` as reflection:\n     *\n     * |       | E=0 | S=2 | W=4 | N=6 | E^=8 | S^=10 | W^=12 | N^=14 |\n     * |-------|-----|-----|-----|-----|------|-------|-------|-------|\n     * | E=0   | E   | S   | W   | N   | E^   | S^    | W^    | N^    |\n     * | S=2   | S   | W   | N   | E   | S^   | W^    | N^    | E^    |\n     * | W=4   | W   | N   | E   | S   | W^   | N^    | E^    | S^    |\n     * | N=6   | N   | E   | S   | W   | N^   | E^    | S^    | W^    |\n     * | E^=8  | E^  | N^  | W^  | S^  | E    | N     | W     | S     |\n     * | S^=10 | S^  | E^  | N^  | W^  | S    | E     | N     | W     |\n     * | W^=12 | W^  | S^  | E^  | N^  | W    | S     | E     | N     |\n     * | N^=14 | N^  | W^  | S^  | E^  | N    | W     | S     | E     |\n     *\n     * [This is a Cayley table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotationSecond - Second operation, which\n     *   is the row in the above cayley table.\n     * @param {PIXI.GD8Symmetry} rotationFirst - First operation, which\n     *   is the column in the above cayley table.\n     * @returns {PIXI.GD8Symmetry} Composed operation\n     */\n    add: (rotationSecond: GD8Symmetry, rotationFirst: GD8Symmetry): GD8Symmetry => (\n        rotationCayley[rotationSecond][rotationFirst]\n    ),\n\n    /**\n     * Reverse of `add`.\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotationSecond - Second operation\n     * @param {PIXI.GD8Symmetry} rotationFirst - First operation\n     * @returns {PIXI.GD8Symmetry} Result\n     */\n    sub: (rotationSecond: GD8Symmetry, rotationFirst: GD8Symmetry): GD8Symmetry => (\n        rotationCayley[rotationSecond][groupD8.inv(rotationFirst)]\n    ),\n\n    /**\n     * Adds 180 degrees to rotation, which is a commutative\n     * operation.\n     * @memberof PIXI.groupD8\n     * @param {number} rotation - The number to rotate.\n     * @returns {number} Rotated number\n     */\n    rotate180: (rotation: number): number => rotation ^ 4,\n\n    /**\n     * Checks if the rotation angle is vertical, i.e. south\n     * or north. It doesn't work for reflections.\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotation - The number to check.\n     * @returns {boolean} Whether or not the direction is vertical\n     */\n    isVertical: (rotation: GD8Symmetry): boolean => (rotation & 3) === 2, // rotation % 4 === 2\n\n    /**\n     * Approximates the vector `V(dx,dy)` into one of the\n     * eight directions provided by `groupD8`.\n     * @memberof PIXI.groupD8\n     * @param {number} dx - X-component of the vector\n     * @param {number} dy - Y-component of the vector\n     * @returns {PIXI.GD8Symmetry} Approximation of the vector into\n     *  one of the eight symmetries.\n     */\n    byDirection: (dx: number, dy: number): GD8Symmetry =>\n    {\n        if (Math.abs(dx) * 2 <= Math.abs(dy))\n        {\n            if (dy >= 0)\n            {\n                return groupD8.S;\n            }\n\n            return groupD8.N;\n        }\n        else if (Math.abs(dy) * 2 <= Math.abs(dx))\n        {\n            if (dx > 0)\n            {\n                return groupD8.E;\n            }\n\n            return groupD8.W;\n        }\n        else if (dy > 0)\n        {\n            if (dx > 0)\n            {\n                return groupD8.SE;\n            }\n\n            return groupD8.SW;\n        }\n        else if (dx > 0)\n        {\n            return groupD8.NE;\n        }\n\n        return groupD8.NW;\n    },\n\n    /**\n     * Helps sprite to compensate texture packer rotation.\n     * @memberof PIXI.groupD8\n     * @param {PIXI.Matrix} matrix - sprite world matrix\n     * @param {PIXI.GD8Symmetry} rotation - The rotation factor to use.\n     * @param {number} tx - sprite anchoring\n     * @param {number} ty - sprite anchoring\n     */\n    matrixAppendRotationInv: (matrix: Matrix, rotation: GD8Symmetry, tx = 0, ty = 0): void =>\n    {\n        // Packer used \"rotation\", we use \"inv(rotation)\"\n        const mat: Matrix = rotationMatrices[groupD8.inv(rotation)];\n\n        mat.tx = tx;\n        mat.ty = ty;\n        matrix.append(mat);\n    },\n};\n","import { ObservablePoint } from './ObservablePoint';\nimport { Matrix } from './Matrix';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Transform extends GlobalMixins.Transform {}\n\n/**\n * Transform that takes care about its versions.\n * @memberof PIXI\n */\nexport class Transform\n{\n    /** A default (identity) transform. */\n    public static readonly IDENTITY = new Transform();\n\n    /** The world transformation matrix. */\n    public worldTransform: Matrix;\n\n    /** The local transformation matrix. */\n    public localTransform: Matrix;\n\n    /** The coordinate of the object relative to the local coordinates of the parent. */\n    public position: ObservablePoint;\n\n    /** The scale factor of the object. */\n    public scale: ObservablePoint;\n\n    /** The pivot point of the displayObject that it rotates around. */\n    public pivot: ObservablePoint;\n\n    /** The skew amount, on the x and y axis. */\n    public skew: ObservablePoint;\n\n    /** The locally unique ID of the parent's world transform used to calculate the current world transformation matrix. */\n    public _parentID: number;\n\n    /** The locally unique ID of the world transform. */\n    _worldID: number;\n\n    /** The rotation amount. */\n    protected _rotation: number;\n\n    /**\n     * The X-coordinate value of the normalized local X axis,\n     * the first column of the local transformation matrix without a scale.\n     */\n    protected _cx: number;\n\n    /**\n     * The Y-coordinate value of the normalized local X axis,\n     * the first column of the local transformation matrix without a scale.\n     */\n    protected _sx: number;\n\n    /**\n     * The X-coordinate value of the normalized local Y axis,\n     * the second column of the local transformation matrix without a scale.\n     */\n    protected _cy: number;\n\n    /**\n     * The Y-coordinate value of the normalized local Y axis,\n     * the second column of the local transformation matrix without a scale.\n     */\n    protected _sy: number;\n\n    /** The locally unique ID of the local transform. */\n    protected _localID: number;\n\n    /** The locally unique ID of the local transform used to calculate the current local transformation matrix. */\n    protected _currentLocalID: number;\n\n    constructor()\n    {\n        this.worldTransform = new Matrix();\n        this.localTransform = new Matrix();\n        this.position = new ObservablePoint(this.onChange, this, 0, 0);\n        this.scale = new ObservablePoint(this.onChange, this, 1, 1);\n        this.pivot = new ObservablePoint(this.onChange, this, 0, 0);\n        this.skew = new ObservablePoint(this.updateSkew, this, 0, 0);\n\n        this._rotation = 0;\n        this._cx = 1;\n        this._sx = 0;\n        this._cy = 0;\n        this._sy = 1;\n        this._localID = 0;\n        this._currentLocalID = 0;\n\n        this._worldID = 0;\n        this._parentID = 0;\n    }\n\n    /** Called when a value changes. */\n    protected onChange(): void\n    {\n        this._localID++;\n    }\n\n    /** Called when the skew or the rotation changes. */\n    protected updateSkew(): void\n    {\n        this._cx = Math.cos(this._rotation + this.skew.y);\n        this._sx = Math.sin(this._rotation + this.skew.y);\n        this._cy = -Math.sin(this._rotation - this.skew.x); // cos, added PI/2\n        this._sy = Math.cos(this._rotation - this.skew.x); // sin, added PI/2\n\n        this._localID++;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Transform `\n            + `position=(${this.position.x}, ${this.position.y}) `\n            + `rotation=${this.rotation} `\n            + `scale=(${this.scale.x}, ${this.scale.y}) `\n            + `skew=(${this.skew.x}, ${this.skew.y}) `\n            + `]`;\n    }\n    // #endif\n\n    /** Updates the local transformation matrix. */\n    updateLocalTransform(): void\n    {\n        const lt = this.localTransform;\n\n        if (this._localID !== this._currentLocalID)\n        {\n            // get the matrix values of the displayobject based on its transform properties..\n            lt.a = this._cx * this.scale.x;\n            lt.b = this._sx * this.scale.x;\n            lt.c = this._cy * this.scale.y;\n            lt.d = this._sy * this.scale.y;\n\n            lt.tx = this.position.x - ((this.pivot.x * lt.a) + (this.pivot.y * lt.c));\n            lt.ty = this.position.y - ((this.pivot.x * lt.b) + (this.pivot.y * lt.d));\n            this._currentLocalID = this._localID;\n\n            // force an update..\n            this._parentID = -1;\n        }\n    }\n\n    /**\n     * Updates the local and the world transformation matrices.\n     * @param parentTransform - The parent transform\n     */\n    updateTransform(parentTransform: Transform): void\n    {\n        const lt = this.localTransform;\n\n        if (this._localID !== this._currentLocalID)\n        {\n            // get the matrix values of the displayobject based on its transform properties..\n            lt.a = this._cx * this.scale.x;\n            lt.b = this._sx * this.scale.x;\n            lt.c = this._cy * this.scale.y;\n            lt.d = this._sy * this.scale.y;\n\n            lt.tx = this.position.x - ((this.pivot.x * lt.a) + (this.pivot.y * lt.c));\n            lt.ty = this.position.y - ((this.pivot.x * lt.b) + (this.pivot.y * lt.d));\n            this._currentLocalID = this._localID;\n\n            // force an update..\n            this._parentID = -1;\n        }\n\n        if (this._parentID !== parentTransform._worldID)\n        {\n            // concat the parent matrix with the objects transform.\n            const pt = parentTransform.worldTransform;\n            const wt = this.worldTransform;\n\n            wt.a = (lt.a * pt.a) + (lt.b * pt.c);\n            wt.b = (lt.a * pt.b) + (lt.b * pt.d);\n            wt.c = (lt.c * pt.a) + (lt.d * pt.c);\n            wt.d = (lt.c * pt.b) + (lt.d * pt.d);\n            wt.tx = (lt.tx * pt.a) + (lt.ty * pt.c) + pt.tx;\n            wt.ty = (lt.tx * pt.b) + (lt.ty * pt.d) + pt.ty;\n\n            this._parentID = parentTransform._worldID;\n\n            // update the id of the transform..\n            this._worldID++;\n        }\n    }\n\n    /**\n     * Decomposes a matrix and sets the transforms properties based on it.\n     * @param matrix - The matrix to decompose\n     */\n    setFromMatrix(matrix: Matrix): void\n    {\n        matrix.decompose(this);\n        this._localID++;\n    }\n\n    /** The rotation of the object in radians. */\n    get rotation(): number\n    {\n        return this._rotation;\n    }\n\n    set rotation(value: number)\n    {\n        if (this._rotation !== value)\n        {\n            this._rotation = value;\n            this.updateSkew();\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}