{"ast":null,"code":"import { DisplayObject, Container } from \"@pixi/display\";\nDisplayObject.prototype.name = null;\nContainer.prototype.getChildByName = function (name, deep) {\n  for (let i = 0, j = this.children.length; i < j; i++) if (this.children[i].name === name) return this.children[i];\n  if (deep) for (let i = 0, j = this.children.length; i < j; i++) {\n    const child = this.children[i];\n    if (!child.getChildByName) continue;\n    const target = child.getChildByName(name, !0);\n    if (target) return target;\n  }\n  return null;\n};","map":{"version":3,"names":["DisplayObject","prototype","name","Container","getChildByName","deep","i","j","children","length","child","target"],"sources":["C:\\Users\\Owner\\Desktop\\python\\TTS-systeam\\voice\\web-tts\\node_modules\\pixi.js\\node_modules\\@pixi\\mixin-get-child-by-name\\src\\index.ts"],"sourcesContent":["/// <reference path=\"../global.d.ts\" />\nimport { Container, DisplayObject } from '@pixi/display';\n\n/**\n * The instance name of the object.\n * @memberof PIXI.DisplayObject#\n * @member {string} name\n */\nDisplayObject.prototype.name = null;\n\n/**\n * Returns the display object in the container.\n *\n * Recursive searches are done in a preorder traversal.\n * @method getChildByName\n * @memberof PIXI.Container#\n * @param {string} name - Instance name.\n * @param {boolean}[deep=false] - Whether to search recursively\n * @returns {PIXI.DisplayObject} The child with the specified name.\n */\nContainer.prototype.getChildByName = function getChildByName<T extends DisplayObject = DisplayObject>(\n    name: string,\n    deep?: boolean,\n): T | null\n{\n    for (let i = 0, j = this.children.length; i < j; i++)\n    {\n        if (this.children[i].name === name)\n        {\n            return this.children[i];\n        }\n    }\n\n    if (deep)\n    {\n        for (let i = 0, j = this.children.length; i < j; i++)\n        {\n            const child = (this.children[i] as Container);\n\n            if (!child.getChildByName)\n            {\n                continue;\n            }\n\n            const target = child.getChildByName<T>(name, true);\n\n            if (target)\n            {\n                return target;\n            }\n        }\n    }\n\n    return null;\n};\n"],"mappings":";AAQAA,aAAA,CAAcC,SAAA,CAAUC,IAAA,GAAO;AAY/BC,SAAA,CAAUF,SAAA,CAAUG,cAAA,GAAiB,UACjCF,IAAA,EACAG,IAAA,EAEJ;EACI,SAASC,CAAA,GAAI,GAAGC,CAAA,GAAI,KAAKC,QAAA,CAASC,MAAA,EAAQH,CAAA,GAAIC,CAAA,EAAGD,CAAA,IAE7C,IAAI,KAAKE,QAAA,CAASF,CAAC,EAAEJ,IAAA,KAASA,IAAA,EAEnB,YAAKM,QAAA,CAASF,CAAC;EAI1B,IAAAD,IAAA,EAES,SAAAC,CAAA,GAAI,GAAGC,CAAA,GAAI,KAAKC,QAAA,CAASC,MAAA,EAAQH,CAAA,GAAIC,CAAA,EAAGD,CAAA,IACjD;IACU,MAAAI,KAAA,GAAS,KAAKF,QAAA,CAASF,CAAC;IAE9B,IAAI,CAACI,KAAA,CAAMN,cAAA,EAEP;IAGJ,MAAMO,MAAA,GAASD,KAAA,CAAMN,cAAA,CAAkBF,IAAA,EAAM,EAAI;IAE7C,IAAAS,MAAA,EAEO,OAAAA,MAAA;EAEf;EAGG;AACX"},"metadata":{},"sourceType":"module","externalDependencies":[]}