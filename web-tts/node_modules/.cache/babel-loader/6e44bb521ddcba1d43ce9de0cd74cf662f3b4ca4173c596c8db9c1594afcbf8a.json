{"ast":null,"code":"import { LoaderParserPriority, checkExtension, createTexture } from \"@pixi/assets\";\nimport { ExtensionType, settings, BaseTexture, MIPMAP_MODES, ALPHA_MODES, utils, extensions } from \"@pixi/core\";\nimport \"../parsers/index.mjs\";\nimport { parseDDS } from \"../parsers/parseDDS.mjs\";\nconst loadDDS = {\n  extension: {\n    type: ExtensionType.LoadParser,\n    priority: LoaderParserPriority.High\n  },\n  name: \"loadDDS\",\n  test(url) {\n    return checkExtension(url, \".dds\");\n  },\n  async load(url, asset, loader) {\n    const arrayBuffer = await (await settings.ADAPTER.fetch(url)).arrayBuffer(),\n      textures = parseDDS(arrayBuffer).map(resource => {\n        const base = new BaseTexture(resource, {\n          mipmap: MIPMAP_MODES.OFF,\n          alphaMode: ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,\n          resolution: utils.getResolutionOfUrl(url),\n          ...asset.data\n        });\n        return createTexture(base, loader, url);\n      });\n    return textures.length === 1 ? textures[0] : textures;\n  },\n  unload(texture) {\n    Array.isArray(texture) ? texture.forEach(t => t.destroy(!0)) : texture.destroy(!0);\n  }\n};\nextensions.add(loadDDS);\nexport { loadDDS };","map":{"version":3,"names":["loadDDS","extension","type","ExtensionType","LoadParser","priority","LoaderParserPriority","High","name","test","url","checkExtension","load","asset","loader","arrayBuffer","settings","ADAPTER","fetch","textures","parseDDS","map","resource","base","BaseTexture","mipmap","MIPMAP_MODES","OFF","alphaMode","ALPHA_MODES","NO_PREMULTIPLIED_ALPHA","resolution","utils","getResolutionOfUrl","data","createTexture","length","unload","texture","Array","isArray","forEach","t","destroy","extensions","add"],"sources":["C:\\Users\\Owner\\Desktop\\python\\TTS-systeam\\voice\\web-tts\\node_modules\\pixi.js\\node_modules\\@pixi\\compressed-textures\\src\\loaders\\loadDDS.ts"],"sourcesContent":["import { checkExtension, createTexture, LoaderParserPriority } from '@pixi/assets';\nimport { ALPHA_MODES, BaseTexture, extensions, ExtensionType, MIPMAP_MODES, settings, utils } from '@pixi/core';\nimport { parseDDS } from '../parsers';\n\nimport type { Loader, LoaderParser, ResolvedAsset } from '@pixi/assets';\nimport type { IBaseTextureOptions, Texture } from '@pixi/core';\n\n/** Load our DDS textures! */\nexport const loadDDS: LoaderParser = {\n    extension: {\n        type: ExtensionType.LoadParser,\n        priority: LoaderParserPriority.High,\n    },\n\n    name: 'loadDDS',\n\n    test(url: string): boolean\n    {\n        return checkExtension(url, '.dds');\n    },\n\n    async load(url: string, asset: ResolvedAsset, loader: Loader): Promise<Texture | Texture[]>\n    {\n        // get an array buffer...\n        const response = await settings.ADAPTER.fetch(url);\n\n        const arrayBuffer = await response.arrayBuffer();\n\n        const resources = parseDDS(arrayBuffer);\n\n        const textures = resources.map((resource) =>\n        {\n            const base = new BaseTexture(resource, {\n                mipmap: MIPMAP_MODES.OFF,\n                alphaMode: ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,\n                resolution: utils.getResolutionOfUrl(url),\n                ...asset.data,\n            });\n\n            return createTexture(base, loader, url);\n        });\n\n        return textures.length === 1 ? textures[0] : textures;\n    },\n\n    unload(texture: Texture | Texture[]): void\n    {\n        if (Array.isArray(texture))\n        {\n            texture.forEach((t) => t.destroy(true));\n        }\n        else\n        {\n            texture.destroy(true);\n        }\n    }\n\n} as LoaderParser<Texture | Texture[], IBaseTextureOptions>;\n\nextensions.add(loadDDS);\n"],"mappings":";;;;AAQO,MAAMA,OAAA,GAAwB;EACjCC,SAAA,EAAW;IACPC,IAAA,EAAMC,aAAA,CAAcC,UAAA;IACpBC,QAAA,EAAUC,oBAAA,CAAqBC;EACnC;EAEAC,IAAA,EAAM;EAENC,KAAKC,GAAA,EACL;IACW,OAAAC,cAAA,CAAeD,GAAA,EAAK,MAAM;EACrC;EAEA,MAAME,KAAKF,GAAA,EAAaG,KAAA,EAAsBC,MAAA,EAC9C;IAII,MAAMC,WAAA,GAAc,OAFH,MAAMC,QAAA,CAASC,OAAA,CAAQC,KAAA,CAAMR,GAAG,GAEdK,WAAA,CAAY;MAIzCI,QAAA,GAFYC,QAAA,CAASL,WAAW,EAEXM,GAAA,CAAKC,QAAA,IAChC;QACU,MAAAC,IAAA,GAAO,IAAIC,WAAA,CAAYF,QAAA,EAAU;UACnCG,MAAA,EAAQC,YAAA,CAAaC,GAAA;UACrBC,SAAA,EAAWC,WAAA,CAAYC,sBAAA;UACvBC,UAAA,EAAYC,KAAA,CAAMC,kBAAA,CAAmBvB,GAAG;UACxC,GAAGG,KAAA,CAAMqB;QAAA,CACZ;QAEM,OAAAC,aAAA,CAAcZ,IAAA,EAAMT,MAAA,EAAQJ,GAAG;MAAA,CACzC;IAED,OAAOS,QAAA,CAASiB,MAAA,KAAW,IAAIjB,QAAA,CAAS,CAAC,IAAIA,QAAA;EACjD;EAEAkB,OAAOC,OAAA,EACP;IACQC,KAAA,CAAMC,OAAA,CAAQF,OAAO,IAErBA,OAAA,CAAQG,OAAA,CAASC,CAAA,IAAMA,CAAA,CAAEC,OAAA,CAAQ,EAAI,CAAC,IAItCL,OAAA,CAAQK,OAAA,CAAQ,EAAI;EAE5B;AAEJ;AAEAC,UAAA,CAAWC,GAAA,CAAI7C,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}