{"ast":null,"code":"/*!\n * @pixi/ticker - v6.5.10\n * Compiled Thu, 06 Jul 2023 15:25:11 UTC\n *\n * @pixi/ticker is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { settings } from '@pixi/settings';\nimport { ExtensionType } from '@pixi/extensions';\n\n/**\n * Target frames per millisecond.\n * @static\n * @name TARGET_FPMS\n * @memberof PIXI.settings\n * @type {number}\n * @default 0.06\n */\nsettings.TARGET_FPMS = 0.06;\n\n/**\n * Represents the update priorities used by internal PIXI classes when registered with\n * the {@link PIXI.Ticker} object. Higher priority items are updated first and lower\n * priority items, such as render, should go later.\n * @static\n * @constant\n * @name UPDATE_PRIORITY\n * @memberof PIXI\n * @enum {number}\n * @property {number} [INTERACTION=50] Highest priority, used for {@link PIXI.InteractionManager}\n * @property {number} [HIGH=25] High priority updating, {@link PIXI.VideoBaseTexture} and {@link PIXI.AnimatedSprite}\n * @property {number} [NORMAL=0] Default priority for ticker events, see {@link PIXI.Ticker#add}.\n * @property {number} [LOW=-25] Low priority used for {@link PIXI.Application} rendering.\n * @property {number} [UTILITY=-50] Lowest priority used for {@link PIXI.BasePrepare} utility.\n */\nvar UPDATE_PRIORITY;\n(function (UPDATE_PRIORITY) {\n  UPDATE_PRIORITY[UPDATE_PRIORITY[\"INTERACTION\"] = 50] = \"INTERACTION\";\n  UPDATE_PRIORITY[UPDATE_PRIORITY[\"HIGH\"] = 25] = \"HIGH\";\n  UPDATE_PRIORITY[UPDATE_PRIORITY[\"NORMAL\"] = 0] = \"NORMAL\";\n  UPDATE_PRIORITY[UPDATE_PRIORITY[\"LOW\"] = -25] = \"LOW\";\n  UPDATE_PRIORITY[UPDATE_PRIORITY[\"UTILITY\"] = -50] = \"UTILITY\";\n})(UPDATE_PRIORITY || (UPDATE_PRIORITY = {}));\n\n/**\n * Internal class for handling the priority sorting of ticker handlers.\n * @private\n * @class\n * @memberof PIXI\n */\nvar TickerListener = /** @class */function () {\n  /**\n   * Constructor\n   * @private\n   * @param fn - The listener function to be added for one update\n   * @param context - The listener context\n   * @param priority - The priority for emitting\n   * @param once - If the handler should fire once\n   */\n  function TickerListener(fn, context, priority, once) {\n    if (context === void 0) {\n      context = null;\n    }\n    if (priority === void 0) {\n      priority = 0;\n    }\n    if (once === void 0) {\n      once = false;\n    }\n    /** The next item in chain. */\n    this.next = null;\n    /** The previous item in chain. */\n    this.previous = null;\n    /** `true` if this listener has been destroyed already. */\n    this._destroyed = false;\n    this.fn = fn;\n    this.context = context;\n    this.priority = priority;\n    this.once = once;\n  }\n  /**\n   * Simple compare function to figure out if a function and context match.\n   * @private\n   * @param fn - The listener function to be added for one update\n   * @param context - The listener context\n   * @returns `true` if the listener match the arguments\n   */\n  TickerListener.prototype.match = function (fn, context) {\n    if (context === void 0) {\n      context = null;\n    }\n    return this.fn === fn && this.context === context;\n  };\n  /**\n   * Emit by calling the current function.\n   * @private\n   * @param deltaTime - time since the last emit.\n   * @returns Next ticker\n   */\n  TickerListener.prototype.emit = function (deltaTime) {\n    if (this.fn) {\n      if (this.context) {\n        this.fn.call(this.context, deltaTime);\n      } else {\n        this.fn(deltaTime);\n      }\n    }\n    var redirect = this.next;\n    if (this.once) {\n      this.destroy(true);\n    }\n    // Soft-destroying should remove\n    // the next reference\n    if (this._destroyed) {\n      this.next = null;\n    }\n    return redirect;\n  };\n  /**\n   * Connect to the list.\n   * @private\n   * @param previous - Input node, previous listener\n   */\n  TickerListener.prototype.connect = function (previous) {\n    this.previous = previous;\n    if (previous.next) {\n      previous.next.previous = this;\n    }\n    this.next = previous.next;\n    previous.next = this;\n  };\n  /**\n   * Destroy and don't use after this.\n   * @private\n   * @param hard - `true` to remove the `next` reference, this\n   *        is considered a hard destroy. Soft destroy maintains the next reference.\n   * @returns The listener to redirect while emitting or removing.\n   */\n  TickerListener.prototype.destroy = function (hard) {\n    if (hard === void 0) {\n      hard = false;\n    }\n    this._destroyed = true;\n    this.fn = null;\n    this.context = null;\n    // Disconnect, hook up next and previous\n    if (this.previous) {\n      this.previous.next = this.next;\n    }\n    if (this.next) {\n      this.next.previous = this.previous;\n    }\n    // Redirect to the next item\n    var redirect = this.next;\n    // Remove references\n    this.next = hard ? null : redirect;\n    this.previous = null;\n    return redirect;\n  };\n  return TickerListener;\n}();\n\n/**\n * A Ticker class that runs an update loop that other objects listen to.\n *\n * This class is composed around listeners meant for execution on the next requested animation frame.\n * Animation frames are requested only when necessary, e.g. When the ticker is started and the emitter has listeners.\n * @class\n * @memberof PIXI\n */\nvar Ticker = /** @class */function () {\n  function Ticker() {\n    var _this = this;\n    /**\n     * Whether or not this ticker should invoke the method\n     * {@link PIXI.Ticker#start} automatically\n     * when a listener is added.\n     */\n    this.autoStart = false;\n    /**\n     * Scalar time value from last frame to this frame.\n     * This value is capped by setting {@link PIXI.Ticker#minFPS}\n     * and is scaled with {@link PIXI.Ticker#speed}.\n     * **Note:** The cap may be exceeded by scaling.\n     */\n    this.deltaTime = 1;\n    /**\n     * The last time {@link PIXI.Ticker#update} was invoked.\n     * This value is also reset internally outside of invoking\n     * update, but only when a new animation frame is requested.\n     * If the platform supports DOMHighResTimeStamp,\n     * this value will have a precision of 1 Âµs.\n     */\n    this.lastTime = -1;\n    /**\n     * Factor of current {@link PIXI.Ticker#deltaTime}.\n     * @example\n     * // Scales ticker.deltaTime to what would be\n     * // the equivalent of approximately 120 FPS\n     * ticker.speed = 2;\n     */\n    this.speed = 1;\n    /**\n     * Whether or not this ticker has been started.\n     * `true` if {@link PIXI.Ticker#start} has been called.\n     * `false` if {@link PIXI.Ticker#stop} has been called.\n     * While `false`, this value may change to `true` in the\n     * event of {@link PIXI.Ticker#autoStart} being `true`\n     * and a listener is added.\n     */\n    this.started = false;\n    /** Internal current frame request ID */\n    this._requestId = null;\n    /**\n     * Internal value managed by minFPS property setter and getter.\n     * This is the maximum allowed milliseconds between updates.\n     */\n    this._maxElapsedMS = 100;\n    /**\n     * Internal value managed by minFPS property setter and getter.\n     * This is the minimum allowed milliseconds between updates.\n     */\n    this._minElapsedMS = 0;\n    /** If enabled, deleting is disabled.*/\n    this._protected = false;\n    /** The last time keyframe was executed. Maintains a relatively fixed interval with the previous value. */\n    this._lastFrame = -1;\n    this._head = new TickerListener(null, null, Infinity);\n    this.deltaMS = 1 / settings.TARGET_FPMS;\n    this.elapsedMS = 1 / settings.TARGET_FPMS;\n    this._tick = function (time) {\n      _this._requestId = null;\n      if (_this.started) {\n        // Invoke listeners now\n        _this.update(time);\n        // Listener side effects may have modified ticker state.\n        if (_this.started && _this._requestId === null && _this._head.next) {\n          _this._requestId = requestAnimationFrame(_this._tick);\n        }\n      }\n    };\n  }\n  /**\n   * Conditionally requests a new animation frame.\n   * If a frame has not already been requested, and if the internal\n   * emitter has listeners, a new frame is requested.\n   * @private\n   */\n  Ticker.prototype._requestIfNeeded = function () {\n    if (this._requestId === null && this._head.next) {\n      // ensure callbacks get correct delta\n      this.lastTime = performance.now();\n      this._lastFrame = this.lastTime;\n      this._requestId = requestAnimationFrame(this._tick);\n    }\n  };\n  /**\n   * Conditionally cancels a pending animation frame.\n   * @private\n   */\n  Ticker.prototype._cancelIfNeeded = function () {\n    if (this._requestId !== null) {\n      cancelAnimationFrame(this._requestId);\n      this._requestId = null;\n    }\n  };\n  /**\n   * Conditionally requests a new animation frame.\n   * If the ticker has been started it checks if a frame has not already\n   * been requested, and if the internal emitter has listeners. If these\n   * conditions are met, a new frame is requested. If the ticker has not\n   * been started, but autoStart is `true`, then the ticker starts now,\n   * and continues with the previous conditions to request a new frame.\n   * @private\n   */\n  Ticker.prototype._startIfPossible = function () {\n    if (this.started) {\n      this._requestIfNeeded();\n    } else if (this.autoStart) {\n      this.start();\n    }\n  };\n  /**\n   * Register a handler for tick events. Calls continuously unless\n   * it is removed or the ticker is stopped.\n   * @param fn - The listener function to be added for updates\n   * @param context - The listener context\n   * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting\n   * @returns This instance of a ticker\n   */\n  Ticker.prototype.add = function (fn, context, priority) {\n    if (priority === void 0) {\n      priority = UPDATE_PRIORITY.NORMAL;\n    }\n    return this._addListener(new TickerListener(fn, context, priority));\n  };\n  /**\n   * Add a handler for the tick event which is only execute once.\n   * @param fn - The listener function to be added for one update\n   * @param context - The listener context\n   * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting\n   * @returns This instance of a ticker\n   */\n  Ticker.prototype.addOnce = function (fn, context, priority) {\n    if (priority === void 0) {\n      priority = UPDATE_PRIORITY.NORMAL;\n    }\n    return this._addListener(new TickerListener(fn, context, priority, true));\n  };\n  /**\n   * Internally adds the event handler so that it can be sorted by priority.\n   * Priority allows certain handler (user, AnimatedSprite, Interaction) to be run\n   * before the rendering.\n   * @private\n   * @param listener - Current listener being added.\n   * @returns This instance of a ticker\n   */\n  Ticker.prototype._addListener = function (listener) {\n    // For attaching to head\n    var current = this._head.next;\n    var previous = this._head;\n    // Add the first item\n    if (!current) {\n      listener.connect(previous);\n    } else {\n      // Go from highest to lowest priority\n      while (current) {\n        if (listener.priority > current.priority) {\n          listener.connect(previous);\n          break;\n        }\n        previous = current;\n        current = current.next;\n      }\n      // Not yet connected\n      if (!listener.previous) {\n        listener.connect(previous);\n      }\n    }\n    this._startIfPossible();\n    return this;\n  };\n  /**\n   * Removes any handlers matching the function and context parameters.\n   * If no handlers are left after removing, then it cancels the animation frame.\n   * @param fn - The listener function to be removed\n   * @param context - The listener context to be removed\n   * @returns This instance of a ticker\n   */\n  Ticker.prototype.remove = function (fn, context) {\n    var listener = this._head.next;\n    while (listener) {\n      // We found a match, lets remove it\n      // no break to delete all possible matches\n      // incase a listener was added 2+ times\n      if (listener.match(fn, context)) {\n        listener = listener.destroy();\n      } else {\n        listener = listener.next;\n      }\n    }\n    if (!this._head.next) {\n      this._cancelIfNeeded();\n    }\n    return this;\n  };\n  Object.defineProperty(Ticker.prototype, \"count\", {\n    /**\n     * The number of listeners on this ticker, calculated by walking through linked list\n     * @readonly\n     * @member {number}\n     */\n    get: function () {\n      if (!this._head) {\n        return 0;\n      }\n      var count = 0;\n      var current = this._head;\n      while (current = current.next) {\n        count++;\n      }\n      return count;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** Starts the ticker. If the ticker has listeners a new animation frame is requested at this point. */\n  Ticker.prototype.start = function () {\n    if (!this.started) {\n      this.started = true;\n      this._requestIfNeeded();\n    }\n  };\n  /** Stops the ticker. If the ticker has requested an animation frame it is canceled at this point. */\n  Ticker.prototype.stop = function () {\n    if (this.started) {\n      this.started = false;\n      this._cancelIfNeeded();\n    }\n  };\n  /** Destroy the ticker and don't use after this. Calling this method removes all references to internal events. */\n  Ticker.prototype.destroy = function () {\n    if (!this._protected) {\n      this.stop();\n      var listener = this._head.next;\n      while (listener) {\n        listener = listener.destroy(true);\n      }\n      this._head.destroy();\n      this._head = null;\n    }\n  };\n  /**\n   * Triggers an update. An update entails setting the\n   * current {@link PIXI.Ticker#elapsedMS},\n   * the current {@link PIXI.Ticker#deltaTime},\n   * invoking all listeners with current deltaTime,\n   * and then finally setting {@link PIXI.Ticker#lastTime}\n   * with the value of currentTime that was provided.\n   * This method will be called automatically by animation\n   * frame callbacks if the ticker instance has been started\n   * and listeners are added.\n   * @param {number} [currentTime=performance.now()] - the current time of execution\n   */\n  Ticker.prototype.update = function (currentTime) {\n    if (currentTime === void 0) {\n      currentTime = performance.now();\n    }\n    var elapsedMS;\n    // If the difference in time is zero or negative, we ignore most of the work done here.\n    // If there is no valid difference, then should be no reason to let anyone know about it.\n    // A zero delta, is exactly that, nothing should update.\n    //\n    // The difference in time can be negative, and no this does not mean time traveling.\n    // This can be the result of a race condition between when an animation frame is requested\n    // on the current JavaScript engine event loop, and when the ticker's start method is invoked\n    // (which invokes the internal _requestIfNeeded method). If a frame is requested before\n    // _requestIfNeeded is invoked, then the callback for the animation frame the ticker requests,\n    // can receive a time argument that can be less than the lastTime value that was set within\n    // _requestIfNeeded. This difference is in microseconds, but this is enough to cause problems.\n    //\n    // This check covers this browser engine timing issue, as well as if consumers pass an invalid\n    // currentTime value. This may happen if consumers opt-out of the autoStart, and update themselves.\n    if (currentTime > this.lastTime) {\n      // Save uncapped elapsedMS for measurement\n      elapsedMS = this.elapsedMS = currentTime - this.lastTime;\n      // cap the milliseconds elapsed used for deltaTime\n      if (elapsedMS > this._maxElapsedMS) {\n        elapsedMS = this._maxElapsedMS;\n      }\n      elapsedMS *= this.speed;\n      // If not enough time has passed, exit the function.\n      // Get ready for next frame by setting _lastFrame, but based on _minElapsedMS\n      // adjustment to ensure a relatively stable interval.\n      if (this._minElapsedMS) {\n        var delta = currentTime - this._lastFrame | 0;\n        if (delta < this._minElapsedMS) {\n          return;\n        }\n        this._lastFrame = currentTime - delta % this._minElapsedMS;\n      }\n      this.deltaMS = elapsedMS;\n      this.deltaTime = this.deltaMS * settings.TARGET_FPMS;\n      // Cache a local reference, in-case ticker is destroyed\n      // during the emit, we can still check for head.next\n      var head = this._head;\n      // Invoke listeners added to internal emitter\n      var listener = head.next;\n      while (listener) {\n        listener = listener.emit(this.deltaTime);\n      }\n      if (!head.next) {\n        this._cancelIfNeeded();\n      }\n    } else {\n      this.deltaTime = this.deltaMS = this.elapsedMS = 0;\n    }\n    this.lastTime = currentTime;\n  };\n  Object.defineProperty(Ticker.prototype, \"FPS\", {\n    /**\n     * The frames per second at which this ticker is running.\n     * The default is approximately 60 in most modern browsers.\n     * **Note:** This does not factor in the value of\n     * {@link PIXI.Ticker#speed}, which is specific\n     * to scaling {@link PIXI.Ticker#deltaTime}.\n     * @member {number}\n     * @readonly\n     */\n    get: function () {\n      return 1000 / this.elapsedMS;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Ticker.prototype, \"minFPS\", {\n    /**\n     * Manages the maximum amount of milliseconds allowed to\n     * elapse between invoking {@link PIXI.Ticker#update}.\n     * This value is used to cap {@link PIXI.Ticker#deltaTime},\n     * but does not effect the measured value of {@link PIXI.Ticker#FPS}.\n     * When setting this property it is clamped to a value between\n     * `0` and `PIXI.settings.TARGET_FPMS * 1000`.\n     * @member {number}\n     * @default 10\n     */\n    get: function () {\n      return 1000 / this._maxElapsedMS;\n    },\n    set: function (fps) {\n      // Minimum must be below the maxFPS\n      var minFPS = Math.min(this.maxFPS, fps);\n      // Must be at least 0, but below 1 / settings.TARGET_FPMS\n      var minFPMS = Math.min(Math.max(0, minFPS) / 1000, settings.TARGET_FPMS);\n      this._maxElapsedMS = 1 / minFPMS;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Ticker.prototype, \"maxFPS\", {\n    /**\n     * Manages the minimum amount of milliseconds required to\n     * elapse between invoking {@link PIXI.Ticker#update}.\n     * This will effect the measured value of {@link PIXI.Ticker#FPS}.\n     * If it is set to `0`, then there is no limit; PixiJS will render as many frames as it can.\n     * Otherwise it will be at least `minFPS`\n     * @member {number}\n     * @default 0\n     */\n    get: function () {\n      if (this._minElapsedMS) {\n        return Math.round(1000 / this._minElapsedMS);\n      }\n      return 0;\n    },\n    set: function (fps) {\n      if (fps === 0) {\n        this._minElapsedMS = 0;\n      } else {\n        // Max must be at least the minFPS\n        var maxFPS = Math.max(this.minFPS, fps);\n        this._minElapsedMS = 1 / (maxFPS / 1000);\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Ticker, \"shared\", {\n    /**\n     * The shared ticker instance used by {@link PIXI.AnimatedSprite} and by\n     * {@link PIXI.VideoResource} to update animation frames / video textures.\n     *\n     * It may also be used by {@link PIXI.Application} if created with the `sharedTicker` option property set to true.\n     *\n     * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.\n     * Please follow the examples for usage, including how to opt-out of auto-starting the shared ticker.\n     * @example\n     * let ticker = PIXI.Ticker.shared;\n     * // Set this to prevent starting this ticker when listeners are added.\n     * // By default this is true only for the PIXI.Ticker.shared instance.\n     * ticker.autoStart = false;\n     * // FYI, call this to ensure the ticker is stopped. It should be stopped\n     * // if you have not attempted to render anything yet.\n     * ticker.stop();\n     * // Call this when you are ready for a running shared ticker.\n     * ticker.start();\n     * @example\n     * // You may use the shared ticker to render...\n     * let renderer = PIXI.autoDetectRenderer();\n     * let stage = new PIXI.Container();\n     * document.body.appendChild(renderer.view);\n     * ticker.add(function (time) {\n     *     renderer.render(stage);\n     * });\n     * @example\n     * // Or you can just update it manually.\n     * ticker.autoStart = false;\n     * ticker.stop();\n     * function animate(time) {\n     *     ticker.update(time);\n     *     renderer.render(stage);\n     *     requestAnimationFrame(animate);\n     * }\n     * animate(performance.now());\n     * @member {PIXI.Ticker}\n     * @static\n     */\n    get: function () {\n      if (!Ticker._shared) {\n        var shared = Ticker._shared = new Ticker();\n        shared.autoStart = true;\n        shared._protected = true;\n      }\n      return Ticker._shared;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Ticker, \"system\", {\n    /**\n     * The system ticker instance used by {@link PIXI.InteractionManager} and by\n     * {@link PIXI.BasePrepare} for core timing functionality that shouldn't usually need to be paused,\n     * unlike the `shared` ticker which drives visual animations and rendering which may want to be paused.\n     *\n     * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.\n     * @member {PIXI.Ticker}\n     * @static\n     */\n    get: function () {\n      if (!Ticker._system) {\n        var system = Ticker._system = new Ticker();\n        system.autoStart = true;\n        system._protected = true;\n      }\n      return Ticker._system;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Ticker;\n}();\n\n/**\n * Middleware for for Application Ticker.\n * @example\n * import {TickerPlugin} from '@pixi/ticker';\n * import {Application} from '@pixi/app';\n * import {extensions} from '@pixi/extensions';\n * extensions.add(TickerPlugin);\n * @class\n * @memberof PIXI\n */\nvar TickerPlugin = /** @class */function () {\n  function TickerPlugin() {}\n  /**\n   * Initialize the plugin with scope of application instance\n   * @static\n   * @private\n   * @param {object} [options] - See application options\n   */\n  TickerPlugin.init = function (options) {\n    var _this = this;\n    // Set default\n    options = Object.assign({\n      autoStart: true,\n      sharedTicker: false\n    }, options);\n    // Create ticker setter\n    Object.defineProperty(this, 'ticker', {\n      set: function (ticker) {\n        if (this._ticker) {\n          this._ticker.remove(this.render, this);\n        }\n        this._ticker = ticker;\n        if (ticker) {\n          ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n        }\n      },\n      get: function () {\n        return this._ticker;\n      }\n    });\n    /**\n     * Convenience method for stopping the render.\n     * @method\n     * @memberof PIXI.Application\n     * @instance\n     */\n    this.stop = function () {\n      _this._ticker.stop();\n    };\n    /**\n     * Convenience method for starting the render.\n     * @method\n     * @memberof PIXI.Application\n     * @instance\n     */\n    this.start = function () {\n      _this._ticker.start();\n    };\n    /**\n     * Internal reference to the ticker.\n     * @type {PIXI.Ticker}\n     * @name _ticker\n     * @memberof PIXI.Application#\n     * @private\n     */\n    this._ticker = null;\n    /**\n     * Ticker for doing render updates.\n     * @type {PIXI.Ticker}\n     * @name ticker\n     * @memberof PIXI.Application#\n     * @default PIXI.Ticker.shared\n     */\n    this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n    // Start the rendering\n    if (options.autoStart) {\n      this.start();\n    }\n  };\n  /**\n   * Clean up the ticker, scoped to application.\n   * @static\n   * @private\n   */\n  TickerPlugin.destroy = function () {\n    if (this._ticker) {\n      var oldTicker = this._ticker;\n      this.ticker = null;\n      oldTicker.destroy();\n    }\n  };\n  /** @ignore */\n  TickerPlugin.extension = ExtensionType.Application;\n  return TickerPlugin;\n}();\nexport { Ticker, TickerPlugin, UPDATE_PRIORITY };","map":{"version":3,"names":["settings","TARGET_FPMS","UPDATE_PRIORITY","TickerListener","fn","context","priority","once","next","previous","_destroyed","prototype","match","emit","deltaTime","call","redirect","destroy","connect","hard","Ticker","_this","autoStart","lastTime","speed","started","_requestId","_maxElapsedMS","_minElapsedMS","_protected","_lastFrame","_head","Infinity","deltaMS","elapsedMS","_tick","time","update","requestAnimationFrame","_requestIfNeeded","performance","now","_cancelIfNeeded","cancelAnimationFrame","_startIfPossible","start","add","NORMAL","_addListener","addOnce","listener","current","remove","Object","defineProperty","get","count","stop","currentTime","delta","head","set","fps","minFPS","Math","min","maxFPS","minFPMS","max","round","_shared","shared","_system","system","TickerPlugin","init","options","assign","sharedTicker","ticker","_ticker","render","LOW","oldTicker","extension","ExtensionType","Application"],"sources":["/Users/zhouchenghan/python/TTS-Systeam/web-tts/node_modules/@pixi/ticker/src/settings.ts","/Users/zhouchenghan/python/TTS-Systeam/web-tts/node_modules/@pixi/ticker/src/const.ts","/Users/zhouchenghan/python/TTS-Systeam/web-tts/node_modules/@pixi/ticker/src/TickerListener.ts","/Users/zhouchenghan/python/TTS-Systeam/web-tts/node_modules/@pixi/ticker/src/Ticker.ts","/Users/zhouchenghan/python/TTS-Systeam/web-tts/node_modules/@pixi/ticker/src/TickerPlugin.ts"],"sourcesContent":["import { settings } from '@pixi/settings';\n\n/**\n * Target frames per millisecond.\n * @static\n * @name TARGET_FPMS\n * @memberof PIXI.settings\n * @type {number}\n * @default 0.06\n */\nsettings.TARGET_FPMS = 0.06;\n\nexport { settings };\n","/**\n * Represents the update priorities used by internal PIXI classes when registered with\n * the {@link PIXI.Ticker} object. Higher priority items are updated first and lower\n * priority items, such as render, should go later.\n * @static\n * @constant\n * @name UPDATE_PRIORITY\n * @memberof PIXI\n * @enum {number}\n * @property {number} [INTERACTION=50] Highest priority, used for {@link PIXI.InteractionManager}\n * @property {number} [HIGH=25] High priority updating, {@link PIXI.VideoBaseTexture} and {@link PIXI.AnimatedSprite}\n * @property {number} [NORMAL=0] Default priority for ticker events, see {@link PIXI.Ticker#add}.\n * @property {number} [LOW=-25] Low priority used for {@link PIXI.Application} rendering.\n * @property {number} [UTILITY=-50] Lowest priority used for {@link PIXI.BasePrepare} utility.\n */\nexport enum UPDATE_PRIORITY\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    INTERACTION = 50,\n    HIGH = 25,\n    NORMAL = 0,\n    LOW = -25,\n    UTILITY = -50,\n}\n","import type { TickerCallback } from './Ticker';\n\n/**\n * Internal class for handling the priority sorting of ticker handlers.\n * @private\n * @class\n * @memberof PIXI\n */\nexport class TickerListener<T = any>\n{\n    /** The current priority. */\n    public priority: number;\n    /** The next item in chain. */\n    public next: TickerListener = null;\n    /** The previous item in chain. */\n    public previous: TickerListener = null;\n\n    /** The handler function to execute. */\n    private fn: TickerCallback<T>;\n    /** The calling to execute. */\n    private context: T;\n    /** If this should only execute once. */\n    private once: boolean;\n    /** `true` if this listener has been destroyed already. */\n    private _destroyed = false;\n\n    /**\n     * Constructor\n     * @private\n     * @param fn - The listener function to be added for one update\n     * @param context - The listener context\n     * @param priority - The priority for emitting\n     * @param once - If the handler should fire once\n     */\n    constructor(fn: TickerCallback<T>, context: T = null, priority = 0, once = false)\n    {\n        this.fn = fn;\n        this.context = context;\n        this.priority = priority;\n        this.once = once;\n    }\n\n    /**\n     * Simple compare function to figure out if a function and context match.\n     * @private\n     * @param fn - The listener function to be added for one update\n     * @param context - The listener context\n     * @returns `true` if the listener match the arguments\n     */\n    match(fn: TickerCallback<T>, context: any = null): boolean\n    {\n        return this.fn === fn && this.context === context;\n    }\n\n    /**\n     * Emit by calling the current function.\n     * @private\n     * @param deltaTime - time since the last emit.\n     * @returns Next ticker\n     */\n    emit(deltaTime: number): TickerListener\n    {\n        if (this.fn)\n        {\n            if (this.context)\n            {\n                this.fn.call(this.context, deltaTime);\n            }\n            else\n            {\n                (this as TickerListener<any>).fn(deltaTime);\n            }\n        }\n\n        const redirect = this.next;\n\n        if (this.once)\n        {\n            this.destroy(true);\n        }\n\n        // Soft-destroying should remove\n        // the next reference\n        if (this._destroyed)\n        {\n            this.next = null;\n        }\n\n        return redirect;\n    }\n\n    /**\n     * Connect to the list.\n     * @private\n     * @param previous - Input node, previous listener\n     */\n    connect(previous: TickerListener): void\n    {\n        this.previous = previous;\n        if (previous.next)\n        {\n            previous.next.previous = this;\n        }\n        this.next = previous.next;\n        previous.next = this;\n    }\n\n    /**\n     * Destroy and don't use after this.\n     * @private\n     * @param hard - `true` to remove the `next` reference, this\n     *        is considered a hard destroy. Soft destroy maintains the next reference.\n     * @returns The listener to redirect while emitting or removing.\n     */\n    destroy(hard = false): TickerListener\n    {\n        this._destroyed = true;\n        this.fn = null;\n        this.context = null;\n\n        // Disconnect, hook up next and previous\n        if (this.previous)\n        {\n            this.previous.next = this.next;\n        }\n\n        if (this.next)\n        {\n            this.next.previous = this.previous;\n        }\n\n        // Redirect to the next item\n        const redirect = this.next;\n\n        // Remove references\n        this.next = hard ? null : redirect;\n        this.previous = null;\n\n        return redirect;\n    }\n}\n","import { settings } from './settings';\nimport { UPDATE_PRIORITY } from './const';\nimport { TickerListener } from './TickerListener';\n\nexport type TickerCallback<T> = (this: T, dt: number) => any;\n\n/**\n * A Ticker class that runs an update loop that other objects listen to.\n *\n * This class is composed around listeners meant for execution on the next requested animation frame.\n * Animation frames are requested only when necessary, e.g. When the ticker is started and the emitter has listeners.\n * @class\n * @memberof PIXI\n */\nexport class Ticker\n{\n    /** The private shared ticker instance */\n    private static _shared: Ticker;\n    /** The private system ticker instance  */\n    private static _system: Ticker;\n\n    /**\n     * Whether or not this ticker should invoke the method\n     * {@link PIXI.Ticker#start} automatically\n     * when a listener is added.\n     */\n    public autoStart = false;\n    /**\n     * Scalar time value from last frame to this frame.\n     * This value is capped by setting {@link PIXI.Ticker#minFPS}\n     * and is scaled with {@link PIXI.Ticker#speed}.\n     * **Note:** The cap may be exceeded by scaling.\n     */\n    public deltaTime = 1;\n    /**\n     * Scaler time elapsed in milliseconds from last frame to this frame.\n     * This value is capped by setting {@link PIXI.Ticker#minFPS}\n     * and is scaled with {@link PIXI.Ticker#speed}.\n     * **Note:** The cap may be exceeded by scaling.\n     * If the platform supports DOMHighResTimeStamp,\n     * this value will have a precision of 1 Âµs.\n     * Defaults to target frame time\n     * @default 16.66\n     */\n    public deltaMS: number;\n    /**\n     * Time elapsed in milliseconds from last frame to this frame.\n     * Opposed to what the scalar {@link PIXI.Ticker#deltaTime}\n     * is based, this value is neither capped nor scaled.\n     * If the platform supports DOMHighResTimeStamp,\n     * this value will have a precision of 1 Âµs.\n     * Defaults to target frame time\n     * @default 16.66\n     */\n    public elapsedMS: number;\n    /**\n     * The last time {@link PIXI.Ticker#update} was invoked.\n     * This value is also reset internally outside of invoking\n     * update, but only when a new animation frame is requested.\n     * If the platform supports DOMHighResTimeStamp,\n     * this value will have a precision of 1 Âµs.\n     */\n    public lastTime = -1;\n    /**\n     * Factor of current {@link PIXI.Ticker#deltaTime}.\n     * @example\n     * // Scales ticker.deltaTime to what would be\n     * // the equivalent of approximately 120 FPS\n     * ticker.speed = 2;\n     */\n    public speed = 1;\n    /**\n     * Whether or not this ticker has been started.\n     * `true` if {@link PIXI.Ticker#start} has been called.\n     * `false` if {@link PIXI.Ticker#stop} has been called.\n     * While `false`, this value may change to `true` in the\n     * event of {@link PIXI.Ticker#autoStart} being `true`\n     * and a listener is added.\n     */\n    public started = false;\n\n    /** The first listener. All new listeners added are chained on this. */\n    private _head: TickerListener;\n    /** Internal current frame request ID */\n    private _requestId: number = null;\n    /**\n     * Internal value managed by minFPS property setter and getter.\n     * This is the maximum allowed milliseconds between updates.\n     */\n    private _maxElapsedMS = 100;\n    /**\n     * Internal value managed by minFPS property setter and getter.\n     * This is the minimum allowed milliseconds between updates.\n     */\n    private _minElapsedMS = 0;\n    /** If enabled, deleting is disabled.*/\n    private _protected = false;\n    /** The last time keyframe was executed. Maintains a relatively fixed interval with the previous value. */\n    private _lastFrame = -1;\n    /**\n     * Internal tick method bound to ticker instance.\n     * This is because in early 2015, Function.bind\n     * is still 60% slower in high performance scenarios.\n     * Also separating frame requests from update method\n     * so listeners may be called at any time and with\n     * any animation API, just invoke ticker.update(time).\n     * @param time - Time since last tick.\n     */\n    private _tick: (time: number) => any;\n\n    constructor()\n    {\n        this._head = new TickerListener(null, null, Infinity);\n        this.deltaMS = 1 / settings.TARGET_FPMS;\n        this.elapsedMS = 1 / settings.TARGET_FPMS;\n\n        this._tick = (time: number): void =>\n        {\n            this._requestId = null;\n\n            if (this.started)\n            {\n                // Invoke listeners now\n                this.update(time);\n                // Listener side effects may have modified ticker state.\n                if (this.started && this._requestId === null && this._head.next)\n                {\n                    this._requestId = requestAnimationFrame(this._tick);\n                }\n            }\n        };\n    }\n\n    /**\n     * Conditionally requests a new animation frame.\n     * If a frame has not already been requested, and if the internal\n     * emitter has listeners, a new frame is requested.\n     * @private\n     */\n    private _requestIfNeeded(): void\n    {\n        if (this._requestId === null && this._head.next)\n        {\n            // ensure callbacks get correct delta\n            this.lastTime = performance.now();\n            this._lastFrame = this.lastTime;\n            this._requestId = requestAnimationFrame(this._tick);\n        }\n    }\n\n    /**\n     * Conditionally cancels a pending animation frame.\n     * @private\n     */\n    private _cancelIfNeeded(): void\n    {\n        if (this._requestId !== null)\n        {\n            cancelAnimationFrame(this._requestId);\n            this._requestId = null;\n        }\n    }\n\n    /**\n     * Conditionally requests a new animation frame.\n     * If the ticker has been started it checks if a frame has not already\n     * been requested, and if the internal emitter has listeners. If these\n     * conditions are met, a new frame is requested. If the ticker has not\n     * been started, but autoStart is `true`, then the ticker starts now,\n     * and continues with the previous conditions to request a new frame.\n     * @private\n     */\n    private _startIfPossible(): void\n    {\n        if (this.started)\n        {\n            this._requestIfNeeded();\n        }\n        else if (this.autoStart)\n        {\n            this.start();\n        }\n    }\n\n    /**\n     * Register a handler for tick events. Calls continuously unless\n     * it is removed or the ticker is stopped.\n     * @param fn - The listener function to be added for updates\n     * @param context - The listener context\n     * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting\n     * @returns This instance of a ticker\n     */\n    add<T = any>(fn: TickerCallback<T>, context?: T, priority = UPDATE_PRIORITY.NORMAL): this\n    {\n        return this._addListener(new TickerListener(fn, context, priority));\n    }\n\n    /**\n     * Add a handler for the tick event which is only execute once.\n     * @param fn - The listener function to be added for one update\n     * @param context - The listener context\n     * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting\n     * @returns This instance of a ticker\n     */\n    addOnce<T = any>(fn: TickerCallback<T>, context?: T, priority = UPDATE_PRIORITY.NORMAL): this\n    {\n        return this._addListener(new TickerListener(fn, context, priority, true));\n    }\n\n    /**\n     * Internally adds the event handler so that it can be sorted by priority.\n     * Priority allows certain handler (user, AnimatedSprite, Interaction) to be run\n     * before the rendering.\n     * @private\n     * @param listener - Current listener being added.\n     * @returns This instance of a ticker\n     */\n    private _addListener(listener: TickerListener): this\n    {\n        // For attaching to head\n        let current = this._head.next;\n        let previous = this._head;\n\n        // Add the first item\n        if (!current)\n        {\n            listener.connect(previous);\n        }\n        else\n        {\n            // Go from highest to lowest priority\n            while (current)\n            {\n                if (listener.priority > current.priority)\n                {\n                    listener.connect(previous);\n                    break;\n                }\n                previous = current;\n                current = current.next;\n            }\n\n            // Not yet connected\n            if (!listener.previous)\n            {\n                listener.connect(previous);\n            }\n        }\n\n        this._startIfPossible();\n\n        return this;\n    }\n\n    /**\n     * Removes any handlers matching the function and context parameters.\n     * If no handlers are left after removing, then it cancels the animation frame.\n     * @param fn - The listener function to be removed\n     * @param context - The listener context to be removed\n     * @returns This instance of a ticker\n     */\n    remove<T = any>(fn: TickerCallback<T>, context?: T): this\n    {\n        let listener = this._head.next;\n\n        while (listener)\n        {\n            // We found a match, lets remove it\n            // no break to delete all possible matches\n            // incase a listener was added 2+ times\n            if (listener.match(fn, context))\n            {\n                listener = listener.destroy();\n            }\n            else\n            {\n                listener = listener.next;\n            }\n        }\n\n        if (!this._head.next)\n        {\n            this._cancelIfNeeded();\n        }\n\n        return this;\n    }\n\n    /**\n     * The number of listeners on this ticker, calculated by walking through linked list\n     * @readonly\n     * @member {number}\n     */\n    get count(): number\n    {\n        if (!this._head)\n        {\n            return 0;\n        }\n\n        let count = 0;\n        let current = this._head;\n\n        while ((current = current.next))\n        {\n            count++;\n        }\n\n        return count;\n    }\n\n    /** Starts the ticker. If the ticker has listeners a new animation frame is requested at this point. */\n    start(): void\n    {\n        if (!this.started)\n        {\n            this.started = true;\n            this._requestIfNeeded();\n        }\n    }\n\n    /** Stops the ticker. If the ticker has requested an animation frame it is canceled at this point. */\n    stop(): void\n    {\n        if (this.started)\n        {\n            this.started = false;\n            this._cancelIfNeeded();\n        }\n    }\n\n    /** Destroy the ticker and don't use after this. Calling this method removes all references to internal events. */\n    destroy(): void\n    {\n        if (!this._protected)\n        {\n            this.stop();\n\n            let listener = this._head.next;\n\n            while (listener)\n            {\n                listener = listener.destroy(true);\n            }\n\n            this._head.destroy();\n            this._head = null;\n        }\n    }\n\n    /**\n     * Triggers an update. An update entails setting the\n     * current {@link PIXI.Ticker#elapsedMS},\n     * the current {@link PIXI.Ticker#deltaTime},\n     * invoking all listeners with current deltaTime,\n     * and then finally setting {@link PIXI.Ticker#lastTime}\n     * with the value of currentTime that was provided.\n     * This method will be called automatically by animation\n     * frame callbacks if the ticker instance has been started\n     * and listeners are added.\n     * @param {number} [currentTime=performance.now()] - the current time of execution\n     */\n    update(currentTime = performance.now()): void\n    {\n        let elapsedMS;\n\n        // If the difference in time is zero or negative, we ignore most of the work done here.\n        // If there is no valid difference, then should be no reason to let anyone know about it.\n        // A zero delta, is exactly that, nothing should update.\n        //\n        // The difference in time can be negative, and no this does not mean time traveling.\n        // This can be the result of a race condition between when an animation frame is requested\n        // on the current JavaScript engine event loop, and when the ticker's start method is invoked\n        // (which invokes the internal _requestIfNeeded method). If a frame is requested before\n        // _requestIfNeeded is invoked, then the callback for the animation frame the ticker requests,\n        // can receive a time argument that can be less than the lastTime value that was set within\n        // _requestIfNeeded. This difference is in microseconds, but this is enough to cause problems.\n        //\n        // This check covers this browser engine timing issue, as well as if consumers pass an invalid\n        // currentTime value. This may happen if consumers opt-out of the autoStart, and update themselves.\n\n        if (currentTime > this.lastTime)\n        {\n            // Save uncapped elapsedMS for measurement\n            elapsedMS = this.elapsedMS = currentTime - this.lastTime;\n\n            // cap the milliseconds elapsed used for deltaTime\n            if (elapsedMS > this._maxElapsedMS)\n            {\n                elapsedMS = this._maxElapsedMS;\n            }\n\n            elapsedMS *= this.speed;\n\n            // If not enough time has passed, exit the function.\n            // Get ready for next frame by setting _lastFrame, but based on _minElapsedMS\n            // adjustment to ensure a relatively stable interval.\n            if (this._minElapsedMS)\n            {\n                const delta = currentTime - this._lastFrame | 0;\n\n                if (delta < this._minElapsedMS)\n                {\n                    return;\n                }\n\n                this._lastFrame = currentTime - (delta % this._minElapsedMS);\n            }\n\n            this.deltaMS = elapsedMS;\n            this.deltaTime = this.deltaMS * settings.TARGET_FPMS;\n\n            // Cache a local reference, in-case ticker is destroyed\n            // during the emit, we can still check for head.next\n            const head = this._head;\n\n            // Invoke listeners added to internal emitter\n            let listener = head.next;\n\n            while (listener)\n            {\n                listener = listener.emit(this.deltaTime);\n            }\n\n            if (!head.next)\n            {\n                this._cancelIfNeeded();\n            }\n        }\n        else\n        {\n            this.deltaTime = this.deltaMS = this.elapsedMS = 0;\n        }\n\n        this.lastTime = currentTime;\n    }\n\n    /**\n     * The frames per second at which this ticker is running.\n     * The default is approximately 60 in most modern browsers.\n     * **Note:** This does not factor in the value of\n     * {@link PIXI.Ticker#speed}, which is specific\n     * to scaling {@link PIXI.Ticker#deltaTime}.\n     * @member {number}\n     * @readonly\n     */\n    get FPS(): number\n    {\n        return 1000 / this.elapsedMS;\n    }\n\n    /**\n     * Manages the maximum amount of milliseconds allowed to\n     * elapse between invoking {@link PIXI.Ticker#update}.\n     * This value is used to cap {@link PIXI.Ticker#deltaTime},\n     * but does not effect the measured value of {@link PIXI.Ticker#FPS}.\n     * When setting this property it is clamped to a value between\n     * `0` and `PIXI.settings.TARGET_FPMS * 1000`.\n     * @member {number}\n     * @default 10\n     */\n    get minFPS(): number\n    {\n        return 1000 / this._maxElapsedMS;\n    }\n\n    set minFPS(fps: number)\n    {\n        // Minimum must be below the maxFPS\n        const minFPS = Math.min(this.maxFPS, fps);\n\n        // Must be at least 0, but below 1 / settings.TARGET_FPMS\n        const minFPMS = Math.min(Math.max(0, minFPS) / 1000, settings.TARGET_FPMS);\n\n        this._maxElapsedMS = 1 / minFPMS;\n    }\n\n    /**\n     * Manages the minimum amount of milliseconds required to\n     * elapse between invoking {@link PIXI.Ticker#update}.\n     * This will effect the measured value of {@link PIXI.Ticker#FPS}.\n     * If it is set to `0`, then there is no limit; PixiJS will render as many frames as it can.\n     * Otherwise it will be at least `minFPS`\n     * @member {number}\n     * @default 0\n     */\n    get maxFPS(): number\n    {\n        if (this._minElapsedMS)\n        {\n            return Math.round(1000 / this._minElapsedMS);\n        }\n\n        return 0;\n    }\n\n    set maxFPS(fps: number)\n    {\n        if (fps === 0)\n        {\n            this._minElapsedMS = 0;\n        }\n        else\n        {\n            // Max must be at least the minFPS\n            const maxFPS = Math.max(this.minFPS, fps);\n\n            this._minElapsedMS = 1 / (maxFPS / 1000);\n        }\n    }\n\n    /**\n     * The shared ticker instance used by {@link PIXI.AnimatedSprite} and by\n     * {@link PIXI.VideoResource} to update animation frames / video textures.\n     *\n     * It may also be used by {@link PIXI.Application} if created with the `sharedTicker` option property set to true.\n     *\n     * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.\n     * Please follow the examples for usage, including how to opt-out of auto-starting the shared ticker.\n     * @example\n     * let ticker = PIXI.Ticker.shared;\n     * // Set this to prevent starting this ticker when listeners are added.\n     * // By default this is true only for the PIXI.Ticker.shared instance.\n     * ticker.autoStart = false;\n     * // FYI, call this to ensure the ticker is stopped. It should be stopped\n     * // if you have not attempted to render anything yet.\n     * ticker.stop();\n     * // Call this when you are ready for a running shared ticker.\n     * ticker.start();\n     * @example\n     * // You may use the shared ticker to render...\n     * let renderer = PIXI.autoDetectRenderer();\n     * let stage = new PIXI.Container();\n     * document.body.appendChild(renderer.view);\n     * ticker.add(function (time) {\n     *     renderer.render(stage);\n     * });\n     * @example\n     * // Or you can just update it manually.\n     * ticker.autoStart = false;\n     * ticker.stop();\n     * function animate(time) {\n     *     ticker.update(time);\n     *     renderer.render(stage);\n     *     requestAnimationFrame(animate);\n     * }\n     * animate(performance.now());\n     * @member {PIXI.Ticker}\n     * @static\n     */\n    static get shared(): Ticker\n    {\n        if (!Ticker._shared)\n        {\n            const shared = Ticker._shared = new Ticker();\n\n            shared.autoStart = true;\n            shared._protected = true;\n        }\n\n        return Ticker._shared;\n    }\n\n    /**\n     * The system ticker instance used by {@link PIXI.InteractionManager} and by\n     * {@link PIXI.BasePrepare} for core timing functionality that shouldn't usually need to be paused,\n     * unlike the `shared` ticker which drives visual animations and rendering which may want to be paused.\n     *\n     * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.\n     * @member {PIXI.Ticker}\n     * @static\n     */\n    static get system(): Ticker\n    {\n        if (!Ticker._system)\n        {\n            const system = Ticker._system = new Ticker();\n\n            system.autoStart = true;\n            system._protected = true;\n        }\n\n        return Ticker._system;\n    }\n}\n","import type { ExtensionMetadata } from '@pixi/extensions';\nimport { ExtensionType } from '@pixi/extensions';\nimport { UPDATE_PRIORITY } from './const';\nimport { Ticker } from './Ticker';\n\n/**\n * Middleware for for Application Ticker.\n * @example\n * import {TickerPlugin} from '@pixi/ticker';\n * import {Application} from '@pixi/app';\n * import {extensions} from '@pixi/extensions';\n * extensions.add(TickerPlugin);\n * @class\n * @memberof PIXI\n */\nexport class TickerPlugin\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = ExtensionType.Application;\n\n    static start: () => void;\n    static stop: () => void;\n    static _ticker: Ticker;\n    static ticker: Ticker;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    static init(options?: GlobalMixins.IApplicationOptions): void\n    {\n        // Set default\n        options = Object.assign({\n            autoStart: true,\n            sharedTicker: false,\n        }, options);\n\n        // Create ticker setter\n        Object.defineProperty(this, 'ticker',\n            {\n                set(ticker)\n                {\n                    if (this._ticker)\n                    {\n                        this._ticker.remove(this.render, this);\n                    }\n                    this._ticker = ticker;\n                    if (ticker)\n                    {\n                        ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n                    }\n                },\n                get()\n                {\n                    return this._ticker;\n                },\n            });\n\n        /**\n         * Convenience method for stopping the render.\n         * @method\n         * @memberof PIXI.Application\n         * @instance\n         */\n        this.stop = (): void =>\n        {\n            this._ticker.stop();\n        };\n\n        /**\n         * Convenience method for starting the render.\n         * @method\n         * @memberof PIXI.Application\n         * @instance\n         */\n        this.start = (): void =>\n        {\n            this._ticker.start();\n        };\n\n        /**\n         * Internal reference to the ticker.\n         * @type {PIXI.Ticker}\n         * @name _ticker\n         * @memberof PIXI.Application#\n         * @private\n         */\n        this._ticker = null;\n\n        /**\n         * Ticker for doing render updates.\n         * @type {PIXI.Ticker}\n         * @name ticker\n         * @memberof PIXI.Application#\n         * @default PIXI.Ticker.shared\n         */\n        this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n\n        // Start the rendering\n        if (options.autoStart)\n        {\n            this.start();\n        }\n    }\n\n    /**\n     * Clean up the ticker, scoped to application.\n     * @static\n     * @private\n     */\n    static destroy(): void\n    {\n        if (this._ticker)\n        {\n            const oldTicker = this._ticker;\n\n            this.ticker = null;\n            oldTicker.destroy();\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}