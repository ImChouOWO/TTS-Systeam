{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\TTS-Systeam\\\\web-tts\\\\src\\\\compoment\\\\page\\\\audioPlayer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AudioPlayer(props) {\n  _s();\n  const {\n    data\n  } = props;\n  const audioRef = useRef(null);\n  useEffect(() => {\n    if (audioRef.current && data) {\n      audioRef.current.src = `/voice/${data}`; // 直接更新源\n      audioRef.current.play().then(() => {\n        console.log(\"Audio is now playing\");\n      }).catch(error => {\n        console.error(\"Audio playback failed:\", error);\n      });\n    }\n  }, [data]); // 依赖于 data\n\n  return /*#__PURE__*/_jsxDEV(\"audio\", {\n    ref: audioRef,\n    preload: \"auto\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n}\n_s(AudioPlayer, \"+byXHHf22FzALubYzgUeSQRtz1Y=\");\n_c = AudioPlayer;\nexport default AudioPlayer;\nvar _c;\n$RefreshReg$(_c, \"AudioPlayer\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","AudioPlayer","props","_s","data","audioRef","current","src","play","then","console","log","catch","error","ref","preload","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Projects/TTS-Systeam/web-tts/src/compoment/page/audioPlayer.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\n\r\nfunction AudioPlayer(props) {\r\n    const { data } = props;\r\n    const audioRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (audioRef.current && data) {\r\n            audioRef.current.src = `/voice/${data}`; // 直接更新源\r\n            audioRef.current.play()\r\n                .then(() => {\r\n                    console.log(\"Audio is now playing\");\r\n                })\r\n                .catch(error => {\r\n                    console.error(\"Audio playback failed:\", error);\r\n                });\r\n        }\r\n    }, [data]); // 依赖于 data\r\n\r\n    return (\r\n        <audio ref={audioRef} preload=\"auto\" />\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default AudioPlayer;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,SAASC,WAAWA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACxB,MAAM;IAAEC;EAAK,CAAC,GAAGF,KAAK;EACtB,MAAMG,QAAQ,GAAGR,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACZ,IAAIS,QAAQ,CAACC,OAAO,IAAIF,IAAI,EAAE;MAC1BC,QAAQ,CAACC,OAAO,CAACC,GAAG,GAAI,UAASH,IAAK,EAAC,CAAC,CAAC;MACzCC,QAAQ,CAACC,OAAO,CAACE,IAAI,CAAC,CAAC,CAClBC,IAAI,CAAC,MAAM;QACRC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;MACvC,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;QACZH,OAAO,CAACG,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAClD,CAAC,CAAC;IACV;EACJ,CAAC,EAAE,CAACT,IAAI,CAAC,CAAC,CAAC,CAAC;;EAEZ,oBACIJ,OAAA;IAAOc,GAAG,EAAET,QAAS;IAACU,OAAO,EAAC;EAAM;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAE/C;AAAChB,EAAA,CApBQF,WAAW;AAAAmB,EAAA,GAAXnB,WAAW;AAwBpB,eAAeA,WAAW;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}