{"ast":null,"code":"import { ExtensionType, utils, settings, extensions } from \"@pixi/core\";\nconst resolveCompressedTextureUrl = {\n  extension: ExtensionType.ResolveParser,\n  test: value => {\n    const extension = utils.path.extname(value).slice(1);\n    return [\"basis\", \"ktx\", \"dds\"].includes(extension);\n  },\n  parse: value => {\n    const extension = utils.path.extname(value).slice(1);\n    if (extension === \"ktx\") {\n      const extensions2 = [\".s3tc.ktx\", \".s3tc_sRGB.ktx\", \".etc.ktx\", \".etc1.ktx\", \".pvrt.ktx\", \".atc.ktx\", \".astc.ktx\"];\n      if (extensions2.some(ext => value.endsWith(ext))) return {\n        resolution: parseFloat(settings.RETINA_PREFIX.exec(value)?.[1] ?? \"1\"),\n        format: extensions2.find(ext => value.endsWith(ext)),\n        src: value\n      };\n    }\n    return {\n      resolution: parseFloat(settings.RETINA_PREFIX.exec(value)?.[1] ?? \"1\"),\n      format: extension,\n      src: value\n    };\n  }\n};\nextensions.add(resolveCompressedTextureUrl);\nexport { resolveCompressedTextureUrl };","map":{"version":3,"names":["resolveCompressedTextureUrl","extension","ExtensionType","ResolveParser","test","value","utils","path","extname","slice","includes","parse","extensions2","some","ext","endsWith","resolution","parseFloat","settings","RETINA_PREFIX","exec","format","find","src","extensions","add"],"sources":["C:\\Users\\Owner\\Desktop\\python\\TTS-systeam\\voice\\web-tts\\node_modules\\pixi.js\\node_modules\\@pixi\\compressed-textures\\src\\loaders\\resolveCompressedTextureUrl.ts"],"sourcesContent":["import { extensions, ExtensionType, settings, utils } from '@pixi/core';\n\nimport type { ResolveURLParser, UnresolvedAsset } from '@pixi/assets';\n\nexport const resolveCompressedTextureUrl = {\n    extension: ExtensionType.ResolveParser,\n    test: (value: string) =>\n    {\n        const extension = utils.path.extname(value).slice(1);\n\n        return ['basis', 'ktx', 'dds'].includes(extension);\n    },\n    parse: (value: string): UnresolvedAsset =>\n    {\n        const extension = utils.path.extname(value).slice(1);\n\n        if (extension === 'ktx')\n        {\n            const extensions = [\n                '.s3tc.ktx',\n                '.s3tc_sRGB.ktx',\n                '.etc.ktx',\n                '.etc1.ktx',\n                '.pvrt.ktx',\n                '.atc.ktx',\n                '.astc.ktx'\n            ];\n\n            // check if value ends with one of the extensions\n            if (extensions.some((ext) => value.endsWith(ext)))\n            {\n                return {\n                    resolution: parseFloat(settings.RETINA_PREFIX.exec(value)?.[1] ?? '1'),\n                    format: extensions.find((ext) => value.endsWith(ext)),\n                    src: value,\n                };\n            }\n        }\n\n        return {\n            resolution: parseFloat(settings.RETINA_PREFIX.exec(value)?.[1] ?? '1'),\n            format: extension,\n            src: value,\n        };\n    },\n} as ResolveURLParser;\n\nextensions.add(resolveCompressedTextureUrl);\n"],"mappings":";AAIO,MAAMA,2BAAA,GAA8B;EACvCC,SAAA,EAAWC,aAAA,CAAcC,aAAA;EACzBC,IAAA,EAAOC,KAAA,IACP;IACI,MAAMJ,SAAA,GAAYK,KAAA,CAAMC,IAAA,CAAKC,OAAA,CAAQH,KAAK,EAAEI,KAAA,CAAM,CAAC;IAEnD,OAAO,CAAC,SAAS,OAAO,KAAK,EAAEC,QAAA,CAAST,SAAS;EACrD;EACAU,KAAA,EAAQN,KAAA,IACR;IACI,MAAMJ,SAAA,GAAYK,KAAA,CAAMC,IAAA,CAAKC,OAAA,CAAQH,KAAK,EAAEI,KAAA,CAAM,CAAC;IAEnD,IAAIR,SAAA,KAAc,OAClB;MACI,MAAMW,WAAA,GAAa,CACf,aACA,kBACA,YACA,aACA,aACA,YACA;MAIJ,IAAIA,WAAA,CAAWC,IAAA,CAAMC,GAAA,IAAQT,KAAA,CAAMU,QAAA,CAASD,GAAG,CAAC,GAErC;QACHE,UAAA,EAAYC,UAAA,CAAWC,QAAA,CAASC,aAAA,CAAcC,IAAA,CAAKf,KAAK,IAAI,CAAC,KAAK,GAAG;QACrEgB,MAAA,EAAQT,WAAA,CAAWU,IAAA,CAAMR,GAAA,IAAQT,KAAA,CAAMU,QAAA,CAASD,GAAG,CAAC;QACpDS,GAAA,EAAKlB;MAAA;IAGjB;IAEO;MACHW,UAAA,EAAYC,UAAA,CAAWC,QAAA,CAASC,aAAA,CAAcC,IAAA,CAAKf,KAAK,IAAI,CAAC,KAAK,GAAG;MACrEgB,MAAA,EAAQpB,SAAA;MACRsB,GAAA,EAAKlB;IAAA;EAEb;AACJ;AAEAmB,UAAA,CAAWC,GAAA,CAAIzB,2BAA2B"},"metadata":{},"sourceType":"module","externalDependencies":[]}