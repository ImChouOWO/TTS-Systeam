{"ast":null,"code":"import { Filter, defaultFilterVertex } from \"@pixi/core\";\nimport fragment from \"./noise.frag.mjs\";\nclass NoiseFilter extends Filter {\n  /**\n   * @param {number} [noise=0.5] - The noise intensity, should be a normalized value in the range [0, 1].\n   * @param {number} [seed] - A random seed for the noise generation. Default is `Math.random()`.\n   */\n  constructor(noise = 0.5, seed = Math.random()) {\n    super(defaultFilterVertex, fragment, {\n      uNoise: 0,\n      uSeed: 0\n    }), this.noise = noise, this.seed = seed;\n  }\n  /**\n   * The amount of noise to apply, this value should be in the range (0, 1].\n   * @default 0.5\n   */\n  get noise() {\n    return this.uniforms.uNoise;\n  }\n  set noise(value) {\n    this.uniforms.uNoise = value;\n  }\n  /** A seed value to apply to the random noise generation. `Math.random()` is a good value to use. */\n  get seed() {\n    return this.uniforms.uSeed;\n  }\n  set seed(value) {\n    this.uniforms.uSeed = value;\n  }\n}\nexport { NoiseFilter };","map":{"version":3,"names":["NoiseFilter","Filter","constructor","noise","seed","Math","random","defaultFilterVertex","fragment","uNoise","uSeed","uniforms","value"],"sources":["C:\\Users\\Owner\\Desktop\\python\\TTS-systeam\\voice\\web-tts\\node_modules\\pixi.js\\node_modules\\@pixi\\filter-noise\\src\\NoiseFilter.ts"],"sourcesContent":["import { defaultFilterVertex, Filter } from '@pixi/core';\nimport fragment from './noise.frag';\n\n/**\n * A Noise effect filter.\n *\n * original filter: https://github.com/evanw/glfx.js/blob/master/src/filters/adjust/noise.js\n * @memberof PIXI\n * @author Vico @vicocotea\n */\nexport class NoiseFilter extends Filter\n{\n    /**\n     * @param {number} [noise=0.5] - The noise intensity, should be a normalized value in the range [0, 1].\n     * @param {number} [seed] - A random seed for the noise generation. Default is `Math.random()`.\n     */\n    constructor(noise = 0.5, seed = Math.random())\n    {\n        super(defaultFilterVertex, fragment, {\n            uNoise: 0,\n            uSeed: 0,\n        });\n\n        this.noise = noise;\n        this.seed = seed;\n    }\n\n    /**\n     * The amount of noise to apply, this value should be in the range (0, 1].\n     * @default 0.5\n     */\n    get noise(): number\n    {\n        return this.uniforms.uNoise;\n    }\n\n    set noise(value: number)\n    {\n        this.uniforms.uNoise = value;\n    }\n\n    /** A seed value to apply to the random noise generation. `Math.random()` is a good value to use. */\n    get seed(): number\n    {\n        return this.uniforms.uSeed;\n    }\n\n    set seed(value: number)\n    {\n        this.uniforms.uSeed = value;\n    }\n}\n"],"mappings":";;AAUO,MAAMA,WAAA,SAAoBC,MAAA,CACjC;EAAA;AAAA;AAAA;AAAA;EAKIC,YAAYC,KAAA,GAAQ,KAAKC,IAAA,GAAOC,IAAA,CAAKC,MAAA,IACrC;IACI,MAAMC,mBAAA,EAAqBC,QAAA,EAAU;MACjCC,MAAA,EAAQ;MACRC,KAAA,EAAO;IAAA,CACV,GAED,KAAKP,KAAA,GAAQA,KAAA,EACb,KAAKC,IAAA,GAAOA,IAAA;EAChB;EAAA;AAAA;AAAA;AAAA;EAMA,IAAID,MAAA,EACJ;IACI,OAAO,KAAKQ,QAAA,CAASF,MAAA;EACzB;EAEA,IAAIN,MAAMS,KAAA,EACV;IACI,KAAKD,QAAA,CAASF,MAAA,GAASG,KAAA;EAC3B;EAAA;EAGA,IAAIR,KAAA,EACJ;IACI,OAAO,KAAKO,QAAA,CAASD,KAAA;EACzB;EAEA,IAAIN,KAAKQ,KAAA,EACT;IACI,KAAKD,QAAA,CAASD,KAAA,GAAQE,KAAA;EAC1B;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}