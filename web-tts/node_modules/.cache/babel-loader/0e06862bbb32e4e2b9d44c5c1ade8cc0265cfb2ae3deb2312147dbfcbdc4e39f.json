{"ast":null,"code":"import { INTERNAL_FORMAT_TO_BYTES_PER_PIXEL } from \"../const.mjs\";\nimport { BlobResource } from \"./BlobResource.mjs\";\nclass CompressedTextureResource extends BlobResource {\n  /**\n   * @param source - the buffer/URL holding the compressed texture data\n   * @param options\n   * @param {PIXI.INTERNAL_FORMATS} options.format - the compression format\n   * @param {number} options.width - the image width in pixels.\n   * @param {number} options.height - the image height in pixels.\n   * @param {number} [options.level=1] - the mipmap levels stored in the compressed texture, including level 0.\n   * @param {number} [options.levelBuffers] - the buffers for each mipmap level. `CompressedTextureResource` can allows you\n   *      to pass `null` for `source`, for cases where each level is stored in non-contiguous memory.\n   */\n  constructor(source, options) {\n    super(source, options), this.format = options.format, this.levels = options.levels || 1, this._width = options.width, this._height = options.height, this._extension = CompressedTextureResource._formatToExtension(this.format), (options.levelBuffers || this.buffer) && (this._levelBuffers = options.levelBuffers || CompressedTextureResource._createLevelBuffers(source instanceof Uint8Array ? source : this.buffer.uint8View, this.format, this.levels, 4, 4,\n    // PVRTC has 8x4 blocks in 2bpp mode\n    this.width, this.height));\n  }\n  /**\n   * @override\n   * @param renderer - A reference to the current renderer\n   * @param _texture - the texture\n   * @param _glTexture - texture instance for this webgl context\n   */\n  upload(renderer, _texture, _glTexture) {\n    const gl = renderer.gl;\n    if (!renderer.context.extensions[this._extension]) throw new Error(`${this._extension} textures are not supported on the current machine`);\n    if (!this._levelBuffers) return !1;\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\n    for (let i = 0, j = this.levels; i < j; i++) {\n      const {\n        levelID,\n        levelWidth,\n        levelHeight,\n        levelBuffer\n      } = this._levelBuffers[i];\n      gl.compressedTexImage2D(gl.TEXTURE_2D, levelID, this.format, levelWidth, levelHeight, 0, levelBuffer);\n    }\n    return !0;\n  }\n  /** @protected */\n  onBlobLoaded() {\n    this._levelBuffers = CompressedTextureResource._createLevelBuffers(this.buffer.uint8View, this.format, this.levels, 4, 4,\n    // PVRTC has 8x4 blocks in 2bpp mode\n    this.width, this.height);\n  }\n  /**\n   * Returns the key (to ContextSystem#extensions) for the WebGL extension supporting the compression format\n   * @private\n   * @param format - the compression format to get the extension for.\n   */\n  static _formatToExtension(format) {\n    if (format >= 33776 && format <= 33779) return \"s3tc\";\n    if (format >= 37488 && format <= 37497) return \"etc\";\n    if (format >= 35840 && format <= 35843) return \"pvrtc\";\n    if (format >= 36196) return \"etc1\";\n    if (format >= 35986 && format <= 34798) return \"atc\";\n    throw new Error(\"Invalid (compressed) texture format given!\");\n  }\n  /**\n   * Pre-creates buffer views for each mipmap level\n   * @private\n   * @param buffer -\n   * @param format - compression formats\n   * @param levels - mipmap levels\n   * @param blockWidth -\n   * @param blockHeight -\n   * @param imageWidth - width of the image in pixels\n   * @param imageHeight - height of the image in pixels\n   */\n  static _createLevelBuffers(buffer, format, levels, blockWidth, blockHeight, imageWidth, imageHeight) {\n    const buffers = new Array(levels);\n    let offset = buffer.byteOffset,\n      levelWidth = imageWidth,\n      levelHeight = imageHeight,\n      alignedLevelWidth = levelWidth + blockWidth - 1 & ~(blockWidth - 1),\n      alignedLevelHeight = levelHeight + blockHeight - 1 & ~(blockHeight - 1),\n      levelSize = alignedLevelWidth * alignedLevelHeight * INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[format];\n    for (let i = 0; i < levels; i++) buffers[i] = {\n      levelID: i,\n      levelWidth: levels > 1 ? levelWidth : alignedLevelWidth,\n      levelHeight: levels > 1 ? levelHeight : alignedLevelHeight,\n      levelBuffer: new Uint8Array(buffer.buffer, offset, levelSize)\n    }, offset += levelSize, levelWidth = levelWidth >> 1 || 1, levelHeight = levelHeight >> 1 || 1, alignedLevelWidth = levelWidth + blockWidth - 1 & ~(blockWidth - 1), alignedLevelHeight = levelHeight + blockHeight - 1 & ~(blockHeight - 1), levelSize = alignedLevelWidth * alignedLevelHeight * INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[format];\n    return buffers;\n  }\n}\nexport { CompressedTextureResource };","map":{"version":3,"names":["CompressedTextureResource","BlobResource","constructor","source","options","format","levels","_width","width","_height","height","_extension","_formatToExtension","levelBuffers","buffer","_levelBuffers","_createLevelBuffers","Uint8Array","uint8View","upload","renderer","_texture","_glTexture","gl","context","extensions","Error","pixelStorei","UNPACK_ALIGNMENT","i","j","levelID","levelWidth","levelHeight","levelBuffer","compressedTexImage2D","TEXTURE_2D","onBlobLoaded","blockWidth","blockHeight","imageWidth","imageHeight","buffers","Array","offset","byteOffset","alignedLevelWidth","alignedLevelHeight","levelSize","INTERNAL_FORMAT_TO_BYTES_PER_PIXEL"],"sources":["C:\\Users\\Owner\\Desktop\\python\\TTS-systeam\\voice\\web-tts\\node_modules\\pixi.js\\node_modules\\@pixi\\compressed-textures\\src\\resources\\CompressedTextureResource.ts"],"sourcesContent":["import { INTERNAL_FORMAT_TO_BYTES_PER_PIXEL } from '../const';\nimport { BlobResource } from './BlobResource';\n\nimport type { BaseTexture, BufferType, GLTexture, Renderer } from '@pixi/core';\nimport type { INTERNAL_FORMATS } from '../const';\n\n/**\n * Used in parseKTX\n * @ignore\n */\nexport type CompressedLevelBuffer = {\n    levelID: number,\n    levelWidth: number,\n    levelHeight: number,\n    levelBuffer: Uint8Array\n};\n\n/**\n * @ignore\n */\nexport interface ICompressedTextureResourceOptions\n{\n    format: INTERNAL_FORMATS;\n    width: number;\n    height: number;\n    levels?: number;\n    levelBuffers?: CompressedLevelBuffer[];\n}\n\n/**\n * Resource for compressed texture formats, as follows: S3TC/DXTn (& their sRGB formats), ATC, ASTC, ETC 1/2, PVRTC.\n *\n * Compressed textures improve performance when rendering is texture-bound. The texture data stays compressed in\n * graphics memory, increasing memory locality and speeding up texture fetches. These formats can also be used to store\n * more detail in the same amount of memory.\n *\n * For most developers, container file formats are a better abstraction instead of directly handling raw texture\n * data. PixiJS provides native support for the following texture file formats\n * (via {@link PIXI.loadBasis}, {@link PIXI.loadKTX}, and {@link PIXI.loadDDS}):\n *\n * **.dds** - the DirectDraw Surface file format stores DXTn (DXT-1,3,5) data. See {@link PIXI.parseDDS}\n * **.ktx** - the Khronos Texture Container file format supports storing all the supported WebGL compression formats.\n *  See {@link PIXI.parseKTX}.\n * **.basis** - the BASIS supercompressed file format stores texture data in an internal format that is transcoded\n *  to the compression format supported on the device at _runtime_. It also supports transcoding into a uncompressed\n *  format as a fallback; you must install the `@pixi/basis-loader`, `@pixi/basis-transcoder` packages separately to\n *  use these files. See {@link PIXI.BasisParser}.\n *\n * The loaders for the aforementioned formats use `CompressedTextureResource` internally. It is strongly suggested that\n * they be used instead.\n *\n * ## Working directly with CompressedTextureResource\n *\n * Since `CompressedTextureResource` inherits `BlobResource`, you can provide it a URL pointing to a file containing\n * the raw texture data (with no file headers!):\n * @example\n * import { CompressedTextureResource, INTERNAL_FORMATS } from '@pixi/compressed-textures';\n * import { BaseTexture, Texture, ALPHA_MODES } from 'pixi.js';\n *\n * // The resource backing the texture data for your textures.\n * // NOTE: You can also provide a ArrayBufferView instead of a URL. This is used when loading data from a container file\n * //   format such as KTX, DDS, or BASIS.\n * const compressedResource = new CompressedTextureResource('bunny.dxt5', {\n *     format: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n *     width: 256,\n *     height: 256,\n * });\n *\n * // You can create a base-texture to the cache, so that future `Texture`s can be created using the `Texture.from` API.\n * const baseTexture = new BaseTexture(compressedResource, { pmaMode: ALPHA_MODES.NPM });\n *\n * // Create a Texture to add to the TextureCache\n * const texture = new Texture(baseTexture);\n *\n * // Add baseTexture & texture to the global texture cache\n * BaseTexture.addToCache(baseTexture, 'bunny.dxt5');\n * Texture.addToCache(texture, 'bunny.dxt5');\n * @memberof PIXI\n */\nexport class CompressedTextureResource extends BlobResource\n{\n    /** The compression format */\n    public format: INTERNAL_FORMATS;\n    /**\n     * The number of mipmap levels stored in the resource buffer.\n     * @default 1\n     */\n    public levels: number;\n\n    // Easy access to the WebGL extension providing support for the compression format via ContextSystem\n    private _extension: 's3tc' | 's3tc_sRGB' | 'atc' | 'astc' | 'etc' | 'etc1' | 'pvrtc';\n    // Buffer views for each mipmap level in the main buffer\n    private _levelBuffers: CompressedLevelBuffer[];\n\n    /**\n     * @param source - the buffer/URL holding the compressed texture data\n     * @param options\n     * @param {PIXI.INTERNAL_FORMATS} options.format - the compression format\n     * @param {number} options.width - the image width in pixels.\n     * @param {number} options.height - the image height in pixels.\n     * @param {number} [options.level=1] - the mipmap levels stored in the compressed texture, including level 0.\n     * @param {number} [options.levelBuffers] - the buffers for each mipmap level. `CompressedTextureResource` can allows you\n     *      to pass `null` for `source`, for cases where each level is stored in non-contiguous memory.\n     */\n    constructor(source: string | BufferType, options: ICompressedTextureResourceOptions)\n    {\n        super(source, options);\n\n        this.format = options.format;\n        this.levels = options.levels || 1;\n\n        this._width = options.width;\n        this._height = options.height;\n\n        this._extension = CompressedTextureResource._formatToExtension(this.format);\n\n        if (options.levelBuffers || this.buffer)\n        {\n            // ViewableBuffer doesn't support byteOffset :-( so allow source to be Uint8Array\n            this._levelBuffers = options.levelBuffers\n                || CompressedTextureResource._createLevelBuffers(\n                    source instanceof Uint8Array ? source : this.buffer.uint8View,\n                    this.format,\n                    this.levels,\n                    4, 4, // PVRTC has 8x4 blocks in 2bpp mode\n                    this.width,\n                    this.height);\n        }\n    }\n\n    /**\n     * @override\n     * @param renderer - A reference to the current renderer\n     * @param _texture - the texture\n     * @param _glTexture - texture instance for this webgl context\n     */\n    upload(renderer: Renderer, _texture: BaseTexture, _glTexture: GLTexture): boolean\n    {\n        const gl = renderer.gl;\n        const extension = renderer.context.extensions[this._extension];\n\n        if (!extension)\n        {\n            throw new Error(`${this._extension} textures are not supported on the current machine`);\n        }\n        if (!this._levelBuffers)\n        {\n            // Do not try to upload data before BlobResource loads, unless the levelBuffers were provided directly!\n            return false;\n        }\n\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\n\n        for (let i = 0, j = this.levels; i < j; i++)\n        {\n            const { levelID, levelWidth, levelHeight, levelBuffer } = this._levelBuffers[i];\n\n            gl.compressedTexImage2D(gl.TEXTURE_2D, levelID, this.format, levelWidth, levelHeight, 0, levelBuffer);\n        }\n\n        return true;\n    }\n\n    /** @protected */\n    protected onBlobLoaded(): void\n    {\n        this._levelBuffers = CompressedTextureResource._createLevelBuffers(\n            this.buffer.uint8View,\n            this.format,\n            this.levels,\n            4, 4, // PVRTC has 8x4 blocks in 2bpp mode\n            this.width,\n            this.height);\n    }\n\n    /**\n     * Returns the key (to ContextSystem#extensions) for the WebGL extension supporting the compression format\n     * @private\n     * @param format - the compression format to get the extension for.\n     */\n    private static _formatToExtension(format: INTERNAL_FORMATS):\n    's3tc' | 's3tc_sRGB' | 'atc' |\n    'astc' | 'etc' | 'etc1' | 'pvrtc'\n    {\n        if (format >= 0x83F0 && format <= 0x83F3)\n        {\n            return 's3tc';\n        }\n        else if (format >= 0x9270 && format <= 0x9279)\n        {\n            return 'etc';\n        }\n        else if (format >= 0x8C00 && format <= 0x8C03)\n        {\n            return 'pvrtc';\n        }\n        else if (format >= 0x8D64)\n        {\n            return 'etc1';\n        }\n        else if (format >= 0x8C92 && format <= 0x87EE)\n        {\n            return 'atc';\n        }\n\n        throw new Error('Invalid (compressed) texture format given!');\n    }\n\n    /**\n     * Pre-creates buffer views for each mipmap level\n     * @private\n     * @param buffer -\n     * @param format - compression formats\n     * @param levels - mipmap levels\n     * @param blockWidth -\n     * @param blockHeight -\n     * @param imageWidth - width of the image in pixels\n     * @param imageHeight - height of the image in pixels\n     */\n    private static _createLevelBuffers(\n        buffer: Uint8Array,\n        format: INTERNAL_FORMATS,\n        levels: number,\n        blockWidth: number,\n        blockHeight: number,\n        imageWidth: number,\n        imageHeight: number\n    ): CompressedLevelBuffer[]\n    {\n        // The byte-size of the first level buffer\n        const buffers = new Array<CompressedLevelBuffer>(levels);\n\n        let offset = buffer.byteOffset;\n\n        let levelWidth = imageWidth;\n        let levelHeight = imageHeight;\n        let alignedLevelWidth = (levelWidth + blockWidth - 1) & ~(blockWidth - 1);\n        let alignedLevelHeight = (levelHeight + blockHeight - 1) & ~(blockHeight - 1);\n\n        let levelSize = alignedLevelWidth * alignedLevelHeight * INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[format];\n\n        for (let i = 0; i < levels; i++)\n        {\n            buffers[i] = {\n                levelID: i,\n                levelWidth: levels > 1 ? levelWidth : alignedLevelWidth,\n                levelHeight: levels > 1 ? levelHeight : alignedLevelHeight,\n                levelBuffer: new Uint8Array(buffer.buffer, offset, levelSize)\n            };\n\n            offset += levelSize;\n\n            // Calculate levelBuffer dimensions for next iteration\n            levelWidth = (levelWidth >> 1) || 1;\n            levelHeight = (levelHeight >> 1) || 1;\n            alignedLevelWidth = (levelWidth + blockWidth - 1) & ~(blockWidth - 1);\n            alignedLevelHeight = (levelHeight + blockHeight - 1) & ~(blockHeight - 1);\n            levelSize = alignedLevelWidth * alignedLevelHeight * INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[format];\n        }\n\n        return buffers;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}